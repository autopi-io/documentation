(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{166:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return p}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=d(n),m=a,p=b["".concat(r,".").concat(m)]||b[m]||u[m]||o;return n?i.a.createElement(p,c(c({ref:t},l),{},{components:n})):i.a.createElement(p,c({ref:t},l))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(2),i=n(6),o=(n(0),n(166)),r={id:"using-the-can-bus-commands",title:"Using the CAN bus commands"},c={unversionedId:"guides/using-the-can-bus-commands",id:"guides/using-the-can-bus-commands",isDocsHomePage:!1,title:"Using the CAN bus commands",description:"Working with the CAN bus is on your own risk. Playback and sending commands to the vehicle can be",source:"@site/docs/guides/using_the_can_bus_commands.md",slug:"/guides/using-the-can-bus-commands",permalink:"/guides/using-the-can-bus-commands",version:"current",sidebar:"guidesSidebar",previous:{title:"Setting up our device with Verizon Wireless",permalink:"/guides/setting-up-our-device-with-verizon-wireless"}},s=[{value:"Sending PID&#39;s",id:"sending-pids",children:[]},{value:"The CAN interface",id:"the-can-interface",children:[{value:"Setting the protocol",id:"setting-the-protocol",children:[]},{value:"Dumping/reading data from the CAN bus",id:"dumpingreading-data-from-the-can-bus",children:[]},{value:"Playback of a recorded file",id:"playback-of-a-recorded-file",children:[]},{value:"Sending a single message",id:"sending-a-single-message",children:[]}]},{value:"Using the Cloud CAN Analyzer",id:"using-the-cloud-can-analyzer",children:[]},{value:"Disussion",id:"disussion",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Working with the CAN bus is on your own risk. Playback and sending commands to the vehicle can be\nused to control functions in the vehicle affecting the behavior of the vehicle. We recommend that\nyou NEVER do testing on a vehicle in motion and that you have the parking brake enabled while you\ntest."))),Object(o.b)("p",null,"Hello everyone!"),Object(o.b)("p",null,"In this guide, we will explore how you can communicate and interact with your vehicle's CAN bus.\nTypically, there are two types of CAN busses."),Object(o.b)("p",null,"One type responds to requests for data, that is to say, it almost acts like an HTTP server - it\nreceives a request for a specific data point (let's say speed or RPM) and it sends the requested\ndata back. This type of CAN bus is usually handled with PIDs."),Object(o.b)("p",null,"The second type sends all the vehicle's data on the CAN bus. This means that there is going to be\nlarge amounts of data being streamed. We call this type of data CAN Messages. Within those CAN\nmessages are the so-called CAN signals. Each signal usually represents a specific data point, like\nspeed or RPM."),Object(o.b)("h2",{id:"sending-pids"},"Sending PID's"),Object(o.b)("p",null,"Let's start off with the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/core/commands/core-commands-obd/#obdquery"}),Object(o.b)("inlineCode",{parentName:"a"},"obd.query"))," command. This command is\nused to query the first type of CAN busses. Let's take a look at an example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-console"}),"obd.query test mode=01 pid=0C\n")),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"You may need to add the ",Object(o.b)("inlineCode",{parentName:"p"},"force=True")," parameter to make sure the ECU in the vehicle accepts the\ncommand. "))),Object(o.b)("p",null,"This command can be run from ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https:/my.autopi.io"}),"my.autopi.io")," or\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://local.auotpi.io"}),"local.autopi.io"),"'s web consoles. Let's try to explain each element of the\ncommand. Firstly, ",Object(o.b)("inlineCode",{parentName:"p"},"obd.query")," - that is simply the command that we're attempting to execute. Next is\n",Object(o.b)("inlineCode",{parentName:"p"},"test"),". This is the name that the PID will use. It makes no difference to the comand's execution\nwhat the name is going to be, but if you end up setting up a logger, the name will be used to save\nthat data on your account, so you can later reference it using the name to create a widget."),Object(o.b)("p",null,"Next, there is the ",Object(o.b)("inlineCode",{parentName:"p"},"mode=01")," and ",Object(o.b)("inlineCode",{parentName:"p"},"pid=0C")," pieces of the puzzle. These are the specifications of\nwhich data point you'd like to query for. In this case, we are asking the ECU of the vehicle to\nrespond with the current RPM. You can see a full list of standard PID's\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/OBD-II_PIDs"}),"here"),". Your vehicle may be able to support more or less\nPID's than shown on Wikipedia. "),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"If you'd like to run this command directly\nfrom the device (through ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/guides/how-to-ssh-to-your-device"}),"SSH")," or similar), you will need to\nprepend the ",Object(o.b)("inlineCode",{parentName:"p"},"autopi")," keyword, like so:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-console"}),"autopi obd.query test mode=01 pid=0C\n")))),Object(o.b)("h2",{id:"the-can-interface"},"The CAN interface"),Object(o.b)("p",null,"The CAN interface is somewhat different than just sending standard PID's. It relies more on\nparcing the full data stream on the CAN bus. This is far more advanced, but it also opens up to a\nwhole new level of fun. "),Object(o.b)("h3",{id:"setting-the-protocol"},"Setting the protocol"),Object(o.b)("p",null,"The AutoPi is able to support a wide range of protocols. When you insert it into your vehicle it\nwill try to autodetect the protocol used by the vehicle. It is not always going to be the case that\nthe same protocol is used for all CAN traffic. In fact, CAN traffic may flow on more than one\nprotocol in your vehicle. Switching the protocol on the AutoPi makes it listen for traffic on\ndifferent electrical pins. You can check the current protocol settings using this command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"obd.protocol\n")),Object(o.b)("p",null,"This will give you a list of all the protocols you can set. Changing the protocol can be done with\nthis command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"obd.protocol set=<num>\n")),Object(o.b)("p",null,"Where ",Object(o.b)("inlineCode",{parentName:"p"},"<num>")," is the protocol number."),Object(o.b)("h3",{id:"dumpingreading-data-from-the-can-bus"},"Dumping/reading data from the CAN bus"),Object(o.b)("p",null,"The new interface opens up for dumping data from the CAN bus on the protocol selected. This can be\ndone using the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/core/commands/core-commands-obd/#obddump"}),Object(o.b)("inlineCode",{parentName:"a"},"obd.dump"))," command. Using the command is very easy:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"obd.dump duration=5\n")),Object(o.b)("p",null,"Optional parameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"duration=<seconds>"),": How many seconds to record data. Default is ",Object(o.b)("inlineCode",{parentName:"li"},"2")," seconds."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"file=<path>"),": Write data to a file instead of displaying it on the screen.")),Object(o.b)("p",null,"This will dump a list of messages recorded within 5 seconds of starting the execution of the\ncommand. Those messages might not make much sense at first glance, but that's okay. Usually, DBC\nfiles are used to parse those messages into human readable data."),Object(o.b)("h3",{id:"playback-of-a-recorded-file"},"Playback of a recorded file"),Object(o.b)("p",null,"A file recorded with the ",Object(o.b)("inlineCode",{parentName:"p"},"obd.dump")," command can be played/replayed to the vehicle using the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/core/commands/core-commands-obd/#obdplay"}),Object(o.b)("inlineCode",{parentName:"a"},"obd.play"))," command. Here's an example usage:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"obd.play file=<path>\n")),Object(o.b)("p",null,"The will playback the entire file on the CAN bus. "),Object(o.b)("p",null,"Optional parameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"slice=<T|B>"),": Slice the list of messages before sending on the CAN bus. Based one the divide\nand conquer algorithm. Multiple slice characters can be specified in continuation of each other.",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"T"),": Top half of remaining result."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"B"),": Bottom half of remaining result."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"filter=<expression>"),": Filter out messages before sending on the CAN bus. Multiple filters can\nbe specified if separated using comma characters.",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"+[id][#][data]"),": Include only messages matching string."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-[id][#][data]"),": Exclude messages matching string."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"+duplicate"),": Include only messages where duplicates exist."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-duplicate"),": Exclude messages where duplicates exist."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"+mutate"),": Include only messages where data mutates."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-mutate"),": Exclude messages where data mutates."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"group=<id|msg>"),": How to group the result of sent messages. This only affects the display\nvalues returned from this command. Default is ",Object(o.b)("inlineCode",{parentName:"li"},"id"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"test=<true|false>"),": Run command in test-only (dry-run) mode. No data will be sent on CAN bus.\nDefault is ",Object(o.b)("inlineCode",{parentName:"li"},"false"),".")),Object(o.b)("p",null,'All the filter parameters can be used to find the specific commands that you are seeking. With\nfilters you can remove data that you know is not relevant for finding your specific command (like\ndata that appears a lot). With the slice parameter you can use the "divide and conquer" technique\nto find the specific command. '),Object(o.b)("h3",{id:"sending-a-single-message"},"Sending a single message"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"obd.dump")," and the ",Object(o.b)("inlineCode",{parentName:"p"},"obd.play")," commands is typically used for finding a single specific\ncommand you want to send to the car. This can be lock/unlock or something else controlling your\nvehicle. "),Object(o.b)("p",null,"When you have the specific command, you can send it directly using the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/core/commands/core-commands-obd/#obdsend"}),Object(o.b)("inlineCode",{parentName:"a"},"obd.send"))," command. Here's an example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"obd.send 2101#280000000003E800 expect_response=True auto_format=True\n")),Object(o.b)("p",null,"The first part before the # is the ECU number (the header) and the last part is the data payload.\nYou may need to remove the ",Object(o.b)("inlineCode",{parentName:"p"},"expect_response")," if the ECU doesn't respond on the message you've\nsend."),Object(o.b)("h2",{id:"using-the-cloud-can-analyzer"},"Using the Cloud CAN Analyzer"),Object(o.b)("p",null,"All the above commands are how the interface to the vehicle works. We have combined all of this in\nan interactive CAN Analyzer, which is accessible from the AutoPi Cloud in\nCar Explorer > CAN Analyzer. If you don't see that menu link, you need to make sure that you've\ninstalled the CAN Analyzer add-on from the Add-ons page."),Object(o.b)("p",null,"The CAN Analyzer makes working with your car much simpler. To find your specific command follow\nthese steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'Configure your CAN Bus interface. On the account page under "Vehicles" you can autodetect the\nmost common CAN Bus. If you need to work with a special CAN bus, make sure you have the right baud\nrate configured.')),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},'Select the Bus you want to use and press record. The device will make a "beep" sound when the\nrecording begins and another one when the recording ends. Make sure that the CAN command you want\nto record is happening between the two sounds (like door unlock or window control).')),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The recording is now stored on the device and you can play it back immediately using the CAN\nplayer on the right-hand side of the screen.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"You will see that a lot of data is returned from the bus, so to find the specific command for\nyour function, we recommend using the filters on the right-hand side. Typically, a lot of the data\nis repetetive, so you can start out by removing all the duplicates.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"With the filters, narrow down the results to as few as possible. Then you can replay the\ncommands one by one and see if you can find the command controlling the function you are looking\nfor.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"When you have found your command you can always resend it by using the ",Object(o.b)("inlineCode",{parentName:"p"},"obd.send")," command\ndescribed above."))),Object(o.b)("h2",{id:"disussion"},"Disussion"),Object(o.b)("p",null,"If you'd like to discuss this topic with us or other fellow community memebers, you can do so on\nour community page dedicated for this guide:\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://community.autopi.io/t/using-the-can-bus-commands/571"}),"Using the CAN bus commands")))}d.isMDXComponent=!0}}]);