(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{105:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return s}));var a=n(2),i=n(6),r=(n(0),n(132)),l={id:"core-commands-obd",title:"Obd"},b={unversionedId:"core/commands/core-commands-obd",id:"core/commands/core-commands-obd",isDocsHomePage:!1,title:"Obd",description:"obd.battery",source:"@site/docs/core/commands/obd.md",slug:"/core/commands/core-commands-obd",permalink:"/core/commands/core-commands-obd",version:"current",sidebar:"coreSidebar",previous:{title:"Minionutil",permalink:"/core/commands/core-commands-minionutil"},next:{title:"Power",permalink:"/core/commands/core-commands-power"}},o=[{value:"<code>obd.battery</code>",id:"obdbattery",children:[]},{value:"<code>obd.commands</code>",id:"obdcommands",children:[]},{value:"<code>obd.connection</code>",id:"obdconnection",children:[]},{value:"<code>obd.context</code>",id:"obdcontext",children:[]},{value:"<code>obd.dtc</code>",id:"obddtc",children:[]},{value:"<code>obd.dump</code>",id:"obddump",children:[]},{value:"<code>obd.execute</code>",id:"obdexecute",children:[]},{value:"<code>obd.file_export</code>",id:"obdfile_export",children:[]},{value:"<code>obd.file_import</code>",id:"obdfile_import",children:[]},{value:"<code>obd.filter</code>",id:"obdfilter",children:[]},{value:"<code>obd.help</code>",id:"obdhelp",children:[]},{value:"<code>obd.manage</code>",id:"obdmanage",children:[]},{value:"<code>obd.monitor</code>",id:"obdmonitor",children:[]},{value:"<code>obd.play</code>",id:"obdplay",children:[]},{value:"<code>obd.protocol</code>",id:"obdprotocol",children:[]},{value:"<code>obd.query</code>",id:"obdquery",children:[]},{value:"<code>obd.recordings</code>",id:"obdrecordings",children:[]},{value:"<code>obd.send</code>",id:"obdsend",children:[]},{value:"<code>obd.setup</code>",id:"obdsetup",children:[]},{value:"<code>obd.status</code>",id:"obdstatus",children:[]}],c={rightToc:o};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"obdbattery"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.battery")),Object(r.b)("p",null,"Gets current battery voltage"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdcommands"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.commands")),Object(r.b)("p",null,"Lists all supported OBD commands found for vehicle."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdconnection"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.connection")),Object(r.b)("p",null,"Manages current connection."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Changes baudrate used to communicate with interface."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"reset"))," (str): Reboots interface. Available options: warm, cold")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"EXAMPLES")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.connection")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.connection baudrate=1152000")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.connection reset=cold"))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdcontext"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.context")),Object(r.b)("p",null,"Gets current context."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obddtc"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.dtc")),Object(r.b)("p",null,"Reads and clears Diagnostics Trouble Codes (DTCs)."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"clear"))," (bool): clear DTC codes")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obddump"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.dump")),Object(r.b)("p",null,"Dumps all messages from bus to screen or file."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"duration"))," (int): How many seconds to record data? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"2")," seconds."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"file"))," (str): Write data to a file with the given name."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"description"))," (str): Additional description to the file."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"raw_response"))," (bool): Get raw response without any validation nor parsing? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"format_response"))," (bool): Format response messages by separating header and data with a hash sign? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"True"),".")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdexecute"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.execute")),Object(r.b)("p",null,"Executes an AT/ST command."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"cmd"))," (str): Command to execute.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"assert_result"))," (str or list): Validate the response by checking that is matches this specific value."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"reset"))," (str): Reset interface after execution. Valid options are: ",Object(r.b)("inlineCode",{parentName:"li"},"warm"),", ",Object(r.b)("inlineCode",{parentName:"li"},"cold")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"keep_conn"))," (bool): Keep connection to interface after execution or close it permanently? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"True"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is the given command.")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdfile_export"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.file_export")),Object(r.b)("p",null,"Fast export of all messages on a bus to a log file."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"run"))," (bool): Specify if subprocess should be running or not. If not defined the current state will be queried."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"folder"))," (str): Custom folder to place export log files."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"wait_timeout"))," (int): Maximum time in seconds to wait for subprocess to complete. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"monitor_filtering"))," (bool): Use filters while monitoring or monitor all messages? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),". It is possible to specify ",Object(r.b)("inlineCode",{parentName:"li"},"can")," in order to add filters based on the messages found in a CAN database file (.dbc)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"monitor_mode"))," (int): The STN monitor mode. Default is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"read_timeout"))," (int): How long time in seconds should the subprocess wait for data on the serial port? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"1"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"serial_baudrate"))," (int): Specify a custom baud rate to use for the serial connection to the STN."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"process_nice"))," (int): Process nice value that controls the priority of the subprocess. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"-2"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),".")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdfile_import"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.file_import")),Object(r.b)("p",null,"Fast import of exported log files containing messages from a bus."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"folder"))," (str): Custom folder to import log files from."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"limit"))," (int): The maximum number of lines/messages to read each time. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"5000"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"idle_sleep"))," (int): Pause in seconds if there is no lines/messages to import. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"cleanup_grace"))," (int): Grace period in seconds before a fully imported log file is deleted. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"60"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"process_nice"))," (int): Process nice value that controls the priority of the service. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is ",Object(r.b)("inlineCode",{parentName:"li"},"raw"),".")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdfilter"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.filter")),Object(r.b)("p",null,"Manages filters used when monitoring."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"action"))," (str): Action to perform. Available actions are ",Object(r.b)("inlineCode",{parentName:"li"},"list"),", ",Object(r.b)("inlineCode",{parentName:"li"},"add")," and ",Object(r.b)("inlineCode",{parentName:"li"},"clear"),".")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"EXAMPLES")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.filter list")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.filter add type=<pass|block|flow> pattern=7C8 mask=7FF")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.filter clear [type=<pass|block|flow>]"))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdhelp"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.help")),Object(r.b)("p",null,"Shows this help information."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdmanage"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.manage")),Object(r.b)("p",null,"Runtime management of the underlying service instance."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"SUPPORTED COMMANDS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"hook list|call <name> [argument]... [<key>=<value>]...")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"worker list|show|start|pause|resume|kill <name>")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"reactor list|show <name>")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"run <key>=<value>..."))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"EXAMPLES")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage hook list")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage hook call execute_handler ATRV")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage worker list *")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage worker show *")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage worker start *")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage worker pause *")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage worker resume *")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage worker kill *")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage reactor list")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.manage reactor show *")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'obd.manage run handler="query" args="[\\"ELM_VOLTAGE\\"]" converter="battery" returner="cloud"'))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdmonitor"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.monitor")),Object(r.b)("p",null,"Monitors messages on bus until limit or duration is reached."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"wait"))," (bool): Wait for each message/line to read according to the default timeout of the serial connection (default 1 second). Otherwise there will only be waiting on the first line. line/message. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"limit"))," (int): The maximum number of messages to read. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"500"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"duration"))," (float): How many seconds to monitor? If not set there is no limitation."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"mode"))," (int): The STN monitor mode. Default is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"filtering"))," (bool): Use filters while monitoring or monitor all messages? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is ",Object(r.b)("inlineCode",{parentName:"li"},"raw"),".")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdplay"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.play")),Object(r.b)("p",null,"Plays all messages from a file on the bus."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"file"))," (str): Path to file recorded with the ",Object(r.b)("inlineCode",{parentName:"li"},"obd.dump")," command.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"delay"))," (float): Delay in milliseconds between sending each message. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"slice"))," (str): Slice the list of messages before sending on the CAN bus. Based one the divide and conquer algorithm. Multiple slice characters can be specified in continuation of each other.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"t"),": Top half of remaining result."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"b"),": Bottom half of remaining result."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"filter"))," (str): Filter out messages before sending on the CAN bus. Multiple filters can be specified if separated using comma characters.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"+[id][#][data]"),": Include only messages matching string."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"-[id][#][data]"),": Exclude messages matching string."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"+duplicate"),": Include only messages where duplicates exist."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"-duplicate"),": Exclude messages where duplicates exist."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"+mutate"),": Include only messages where data mutates."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"-mutate"),": Exclude messages where data mutates."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"group"))," (str): How to group the result of sent messages. This only affects the display values returned from this command. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"id"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"id"),": Group by message ID only."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"msg"),": Group by entire message string."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to send the data. If none is specifed the current protocol will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"test"))," (bool): Run command in test-only? (dry-run) mode. No data will be sent on CAN bus. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),".")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdprotocol"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.protocol")),Object(r.b)("p",null,"Configures protocol or lists all supported."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"set"))," (str): Change to protocol with given identifier."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Use custom protocol baudrate. "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),".")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"EXAMPLES")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.protocol")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.protocol set=auto")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.protocol set=6")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.protocol set=53 baudrate=250000"))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdquery"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.query")),Object(r.b)("p",null,"Queries a given OBD command. To see supported OBD commands for your vehicle run: ",Object(r.b)("inlineCode",{parentName:"p"},"obd.commands")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"name"))," (str): Name of the command.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"mode"))," (str): Service section of the PID."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"pid"))," (str): Code section of the PID."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"header"))," (str): Identifer of message to send. If none is specifed the default OBD header will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"bytes"))," (int): Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"decoder"))," (str): Specific decoder to be used to process the response."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"formula"))," (str): Formula written in Python to convert the response."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"unit"))," (str): Unit of the result."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"force"))," (bool): Force query of unknown command. Default is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),".")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"EXAMPLES")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.query RPM")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.query SPEED")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.query FUEL_LEVEL force=True")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.query custom_intake_temp_raw mode=01 pid=0F")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"obd.query custom_intake_temp mode=01 pid=0F decoder=temp"))),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdrecordings"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.recordings")),Object(r.b)("p",null,"Lists all dumped recordings available on disk."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdsend"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.send")),Object(r.b)("p",null,"Sends a message on bus."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"msg"))," (str): Message to send.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS, GENERAL")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"header"))," (str): Identifer of message to send. If none is specifed the default header will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"expect_response"))," (bool): Wait for response after sending? Avoid waiting for timeout by specifying the exact the number of frames expected. Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"raw_response"))," (bool): Get raw response without any validation nor parsing? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"echo"))," (bool): Include the request message in the response? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"output"))," (str): What data type should the output be returned in? Default is a ",Object(r.b)("inlineCode",{parentName:"li"},"list"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is ",Object(r.b)("inlineCode",{parentName:"li"},"raw"),".")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS, CAN SPECIFIC")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_extended_address"))," (str): Use CAN extended address."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_flow_control_clear"))," (bool): Clear all CAN flow control filters and ID pairs before adding any new ones."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_flow_control_filter"))," (str): Ensure CAN flow control filter is added. Value must consist of ",Object(r.b)("inlineCode",{parentName:"li"},"<pattern>,<mask>"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_flow_control_id_pair"))," (str): Ensure CAN flow control ID pair is added. Value must consist of ",Object(r.b)("inlineCode",{parentName:"li"},"<transmitter ID>,<receiver ID>"),".")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdsetup"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.setup")),Object(r.b)("p",null,"Setup advanced runtime settings."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_extended_address"))," (str): Use CAN extended address."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_flow_control_clear"))," (bool): Clear all CAN flow control filters and ID pairs before adding any new ones."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_flow_control_filter"))," (str): Ensure CAN flow control filter is added. Value must consist of ",Object(r.b)("inlineCode",{parentName:"li"},"<pattern>,<mask>"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"can_flow_control_id_pair"))," (str): Ensure CAN flow control ID pair is added. Value must consist of ",Object(r.b)("inlineCode",{parentName:"li"},"<transmitter ID>,<receiver ID>"),".")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"obdstatus"},Object(r.b)("inlineCode",{parentName:"h2"},"obd.status")),Object(r.b)("p",null,"Gets current status information."))}s.isMDXComponent=!0},132:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),s=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},p=function(e){var t=s(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,u=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?i.a.createElement(u,b(b({ref:t},c),{},{components:n})):i.a.createElement(u,b({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var b={};for(var o in t)hasOwnProperty.call(t,o)&&(b[o]=t[o]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var c=2;c<r;c++)l[c]=n[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);