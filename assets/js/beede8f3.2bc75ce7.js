"use strict";(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[5829],{28453:(e,t,i)=>{i.d(t,{R:()=>d,x:()=>a});var n=i(96540);const l={},r=n.createContext(l);function d(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),n.createElement(r.Provider,{value:t},e.children)}},30058:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"getting_started/api/export-data-from-api","title":"Export Data from API","description":"Our REST API offers endpoints that let you retrieve all telemetry data from your device in the format that suits you best:","source":"@site/docs/getting_started/api/export_data_from_api.mdx","sourceDirName":"getting_started/api","slug":"/getting_started/api/export-data-from-api","permalink":"/getting_started/api/export-data-from-api","draft":false,"unlisted":false,"editUrl":"https://github.com/autopi-io/documentation/edit/master/docs/getting_started/api/export_data_from_api.mdx","tags":[],"version":"current","frontMatter":{"id":"export-data-from-api","title":"Export Data from API"},"sidebar":"sidebar","previous":{"title":"Change Device Settings from the REST API","permalink":"/getting_started/api/change-device-settings-from-api"},"next":{"title":"Send Device Data to Own Server","permalink":"/getting_started/api/send-device-data-to-own-server"}}');var l=i(74848),r=i(28453);const d={id:"export-data-from-api",title:"Export Data from API"},a=void 0,s={},o=[{value:"1. Aggregated Data",id:"1-aggregated-data",level:2},{value:"Examples",id:"examples",level:3},{value:"How get logged altitude aggregated into 1 minute average values",id:"how-get-logged-altitude-aggregated-into-1-minute-average-values",level:4},{value:"How get latest value (set aggregation = none, and to_utc can be omitted.",id:"how-get-latest-value-set-aggregation--none-and-to_utc-can-be-omitted",level:4},{value:"2. Raw Data",id:"2-raw-data",level:2},{value:"Example",id:"example",level:3},{value:"Field",id:"field",level:2}];function h(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.p,{children:["Our ",(0,l.jsx)("a",{href:"https://api.autopi.io/",target:"_blank",children:"REST API"})," offers endpoints that let you retrieve all telemetry data from your device in the format that suits you best:"]}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsx)(t.li,{children:"Aggregated Data \u2013 Simplified, high-level summaries for easier analysis."}),"\n",(0,l.jsx)(t.li,{children:"Raw Data \u2013 Detailed, unprocessed data for deeper insights and customization."}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"1-aggregated-data",children:"1. Aggregated Data"}),"\n",(0,l.jsx)(t.p,{children:"This data is aggregated by interval and a method (average, min, max), and is among other\nthings used for the charts in our frontend dashboard."}),"\n",(0,l.jsx)(t.p,{children:"The aggregated data can be retrieved by using this endpoint:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"GET /logbook/storage/read/\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Additional API documentation can be find here: ",(0,l.jsx)("a",{href:"https://api.autopi.io/#/logbook/logbook_storage_read_list",target:"_blank",children:"Logbook - storage read list"})]}),"\n",(0,l.jsx)(t.p,{children:"The endpoint takes the following parameters:"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"right"},children:"Parameter"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"device_id"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["ID of the device ",(0,l.jsx)(t.strong,{children:"(not the unit_id)"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"field"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The field that the value should be retrieved from. See 'Field' below"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"field_type"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The type of the field. See 'Field' below. [float, geo_point, string, long]"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"from_utc"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:'From time in UTC. ISO format. "2020-01-01T00:00:00.000Z"'})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"to_utc"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:'To time in UTC. ISO format. "2020-01-01T00:00:00.000Z"'})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"interval"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"This is the interval to use when aggregating. ie. data for 24 hour queried with interval set to '1h' will return 24 data points, one for each hour. Ignored when aggregation is set to 'none'"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"aggregation"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Method used when aggregating data into the specified interval. [average, min, max, none]."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"size"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Only used when aggregation is set to 'none', and will then return non aggregated values."})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(t.h4,{id:"how-get-logged-altitude-aggregated-into-1-minute-average-values",children:"How get logged altitude aggregated into 1 minute average values"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"GET /logbook/storage/read/\n    ?device_id=6a6c53b5-e18e-4301-9c95-2516006bf7c6\n    &field=track.pos.alt\n    &field_type=float\n    &aggregation=avg\n    &from_utc=2020-07-06T10:03:36.352Z\n    &to_utc=2020-07-06T12:18:14.050Z\n    &interval=1m\n"})}),"\n",(0,l.jsx)(t.h4,{id:"how-get-latest-value-set-aggregation--none-and-to_utc-can-be-omitted",children:"How get latest value (set aggregation = none, and to_utc can be omitted."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"GET /logbook/storage/read/\n    ?device_id=6a6c53b5-e18e-4301-9c95-2516006bf7c6\n    &field=track.pos.alt\n    &field_type=float\n    &aggregation=none\n    &from_utc=2020-07-06T10:03:36.352Z\n"})}),"\n",(0,l.jsx)(t.h2,{id:"2-raw-data",children:"2. Raw Data"}),"\n",(0,l.jsx)(t.p,{children:"The raw data is not aggregated or treated in any way, it is in the same format as it was when it was sent by the device. Remember to keep the time frame of your search narrowed to be sure you'll get data back."}),"\n",(0,l.jsx)(t.p,{children:"The aggregated data can be retrieved by using this endpoint:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"GET /logbook/storage/raw/\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Additional API documentation can be find here: ",(0,l.jsx)("a",{href:"https://api.autopi.io/#/logbook/logbook_storage_raw_list",target:"_blank",children:"Logbook - storage raw list"})]}),"\n",(0,l.jsx)(t.p,{children:"The endpoint takes the following parameters:"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"right"},children:"Parameter"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"device_id"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["ID of the device ",(0,l.jsx)(t.strong,{children:"(not the unit id)"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"data_type"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Optional. The datatype to retrieve. Will return all datatypes of omitted. See 'Field' below."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"start_utc"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:'From time in UTC. ISO format. "2020-01-01T00:00:00.000Z"'})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"end_utc"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:'To time in UTC. ISO format. "2020-01-01T00:00:00.000Z"'})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"right"},children:"use_upload_time"}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Optional. If false (default), ",(0,l.jsx)(t.em,{children:"start_utc"})," and ",(0,l.jsx)(t.em,{children:"end_utc"})," will mean 'period when the data was ",(0,l.jsx)(t.strong,{children:"recorded"}),"'. If true, ",(0,l.jsx)(t.em,{children:"start_utc"})," and ",(0,l.jsx)(t.em,{children:"end_utc"})," will mean 'period when the data was ",(0,l.jsx)(t.strong,{children:"uploaded"}),"'."]})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,l.jsx)(t.p,{children:"How get logged position objects raw"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{children:"GET logbook/storage/raw/\n    ?device_id=6a6c53b5-e18e-4301-9c95-2516006bf7c6\n    &data_type=track.pos\n    &start_utc=2020-11-24T10:13:21.276594Z\n    &end_utc=2020-11-24T11:07:07.177850Z\n"})}),"\n",(0,l.jsx)(t.h2,{id:"field",children:"Field"}),"\n",(0,l.jsxs)(t.p,{children:["To know which fields you can retrieve data from, you can get the list from the following endpoint ",(0,l.jsx)("a",{href:"https://api.autopi.io/#/logbook/logbook_storage_fields_list",target:"_blank",children:"Logbook - storage fields list"})]}),"\n",(0,l.jsx)(t.p,{children:"This will return all the available fields that can be queried, including the type of the field.\nThe data type can be derived from the fields, like so:"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Field"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Datatype"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.speed.value"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.speed"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.bat.level"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.bat"})]})]})]}),"\n",(0,l.jsx)(t.p,{children:"etc."}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"This is the list of data types currently available from a standard device:"})}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Datatype"})})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"acc.xyz"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"ec2x.data_usage"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.ambiant_air_temp"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.bat"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.coolant_temp"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.engine_load"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.fuel_level"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.intake_temp"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.rpm"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"obd.speed"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"rpi.temp"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"track.pos"})}),(0,l.jsx)(t.tr,{children:(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"\u200b"})})]})]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}}}]);