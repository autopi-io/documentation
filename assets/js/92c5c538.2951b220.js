"use strict";(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[2259],{990:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>i});const d=JSON.parse('{"id":"core/commands/core-commands-can-decoder","title":"Can Decoder","description":"candecoder.decodehandler","source":"@site/docs/core/commands/can_decoder.md","sourceDirName":"core/commands","slug":"/core/commands/core-commands-can-decoder","permalink":"/core/commands/core-commands-can-decoder","draft":false,"unlisted":false,"editUrl":"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/can_decoder.md","tags":[],"version":"current","frontMatter":{"id":"core-commands-can-decoder","title":"Can Decoder"}}');var o=c(74848),r=c(28453);const t={id:"core-commands-can-decoder",title:"Can Decoder"},s=void 0,a={},i=[{value:"<code>can_decoder.decode_handler</code>",id:"can_decoderdecode_handler",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"can_decoderdecode_handler",children:(0,o.jsx)(n.code,{children:"can_decoder.decode_handler"})}),"\n",(0,o.jsx)(n.p,{children:"Handler for decoding files containing raw CAN data."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"ARGUMENTS"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"decoder_name"})})," (str): The callname of the decoder."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"input_directory"})})," (str): The path from which input files are read."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"output_format"})})," (str): The path where output files are written to."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"decoder"})})," (str): The decoder type to be used. Currently supported types are ",(0,o.jsx)(n.code,{children:"STANDARD"})," and ",(0,o.jsx)(n.code,{children:"ASAMMDF"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,c)=>{c.d(n,{R:()=>t,x:()=>s});var d=c(96540);const o={},r=d.createContext(o);function t(e){const n=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),d.createElement(r.Provider,{value:n},e.children)}}}]);