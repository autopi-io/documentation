"use strict";(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[4083],{28453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>r});var s=o(96540);const d={},i=s.createContext(d);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),s.createElement(i.Provider,{value:n},e.children)}},94722:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>a,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core/commands/core-commands-modem","title":"Modem","description":"modem.connection","source":"@site/docs/core/commands/modem.md","sourceDirName":"core/commands","slug":"/core/commands/core-commands-modem","permalink":"/core/commands/core-commands-modem","draft":false,"unlisted":false,"editUrl":"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/modem.md","tags":[],"version":"current","frontMatter":{"id":"core-commands-modem","title":"Modem"},"sidebar":"sidebar","previous":{"title":"Minionutil","permalink":"/core/commands/core-commands-minionutil"},"next":{"title":"Mosquitto","permalink":"/core/commands/core-commands-mosquitto"}}');var d=o(74848),i=o(28453);const c={id:"core-commands-modem",title:"Modem"},r=void 0,t={},l=[{value:"<code>modem.connection</code>",id:"modemconnection",level:2},{value:"<code>modem.help</code>",id:"modemhelp",level:2},{value:"<code>modem.manage</code>",id:"modemmanage",level:2},{value:"<code>modem.read_sms</code>",id:"modemread_sms",level:2},{value:"<code>modem.reset</code>",id:"modemreset",level:2}];function m(e){const n={admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"modemconnection",children:(0,d.jsx)(n.code,{children:"modem.connection"})}),"\n",(0,d.jsx)(n.p,{children:"Queries a given connection class command."}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"ARGUMENTS"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"cmd"})})," (str): The command to query."]}),"\n"]}),"\n",(0,d.jsxs)(n.admonition,{type:"note",children:[(0,d.jsxs)(n.p,{children:["When ",(0,d.jsx)(n.code,{children:"modem.connection execute"})," is used with a command like ",(0,d.jsx)(n.code,{children:"AT$GPSACP"})," from bash on device, the ",(0,d.jsx)(n.code,{children:"$"})," must be escaped\nwith a ",(0,d.jsx)(n.code,{children:"\\"}),", so ",(0,d.jsx)(n.code,{children:"AT\\$GPSACP"}),". Otherwise, the ",(0,d.jsx)(n.code,{children:"$GPSACP"})," is interpreted as a bash variable.\nRetrieve GPS Location\nTo retrieve the GPS location of the device, use the gnss_location command. This queries the GNSS module for the current geographical position."]}),(0,d.jsxs)(n.p,{children:["Example commands:\n",(0,d.jsx)(n.code,{children:"autopi modem.connection execute AT\\$GPSACP"}),"\n",(0,d.jsx)(n.code,{children:"autopi modem.connection gnss_location"})]})]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"modemhelp",children:(0,d.jsx)(n.code,{children:"modem.help"})}),"\n",(0,d.jsx)(n.p,{children:"Shows this help information."}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"modemmanage",children:(0,d.jsx)(n.code,{children:"modem.manage"})}),"\n",(0,d.jsx)(n.p,{children:"Runtime management of the underlying service instance."}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"SUPPORTED COMMANDS"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"hook list|call <name> [argument]... [<key>=<value>]..."})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"worker list|show|start|pause|resume|kill <name>"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"reactor list|show <name>"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"run <key>=<value>..."})}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"EXAMPLES"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage hook list"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage hook call connection_handler status"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage worker list *"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage worker show *"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage worker start *"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage worker pause *"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage worker resume *"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage worker kill *"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage reactor list"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"modem.manage reactor show *"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:'modem.manage run handler="connection" args="[\\"status\\"]"'})}),"\n"]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"modemread_sms",children:(0,d.jsx)(n.code,{children:"modem.read_sms"})}),"\n",(0,d.jsxs)(n.p,{children:["Reads SMS messages stored in the modem and processes them into ",(0,d.jsx)(n.code,{children:"system/sms/received"})," events.\nThose events hold information such as the timestamp of the message (when it was received by the\nmodem), the sender and the text."]}),"\n",(0,d.jsx)(n.p,{children:"Optional parameters:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"clear (bool): Should the messages be deleted from the modem after being processed? Default: False."}),"\n"]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"modemreset",children:(0,d.jsx)(n.code,{children:"modem.reset"})}),"\n",(0,d.jsx)(n.p,{children:"Enable or disable the one shot or periodic unit reset."}),"\n",(0,d.jsx)(n.p,{children:"Optional parameters:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"mode (string): The mode in which to operate the command. For available values, look below. Default: None."}),"\n",(0,d.jsx)(n.li,{children:"delay (number): Time interval in minutes after that the unit reboots. Default: 0."}),"\n",(0,d.jsx)(n.li,{children:'reason (str): The reason the reset was performed. Default: "unspecified".'}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Available modes:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"disabled: Disables unit reset."}),"\n",(0,d.jsx)(n.li,{children:"one_shot: Enables the unit reset only one time (one shot reset)."}),"\n",(0,d.jsx)(n.li,{children:"periodic: Enables periodic resets of the unit."}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(m,{...e})}):m(e)}}}]);