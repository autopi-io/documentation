(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[1410],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return p}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),l=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),f=l(t),p=r,v=f["".concat(s,".").concat(p)]||f[p]||u[p]||a;return t?i.createElement(v,c(c({ref:n},d),{},{components:t})):i.createElement(v,c({ref:n},d))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var l=2;l<a;l++)c[l]=t[l];return i.createElement.apply(null,c)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},35959:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return f}});var i=t(22122),r=t(19756),a=(t(67294),t(3905)),c=["components"],o={id:"how-to-use-bluepy-with-autopi-edge-devices",title:"Using bluepy with AutoPi Edge devices"},s="BluePy BLE Guide for AutoPi Edge devices",l={unversionedId:"developer_guides/how-to-use-bluepy-with-autopi-edge-devices",id:"developer_guides/how-to-use-bluepy-with-autopi-edge-devices",isDocsHomePage:!1,title:"Using bluepy with AutoPi Edge devices",description:"Introduction",source:"@site/docs/developer_guides/how_to_use_bluepy.md",sourceDirName:"developer_guides",slug:"/developer_guides/how-to-use-bluepy-with-autopi-edge-devices",permalink:"/developer_guides/how-to-use-bluepy-with-autopi-edge-devices",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/developer_guides/how_to_use_bluepy.md",tags:[],version:"current",frontMatter:{id:"how-to-use-bluepy-with-autopi-edge-devices",title:"Using bluepy with AutoPi Edge devices"},sidebar:"sidebar",previous:{title:"Send Device Data to Own Server",permalink:"/getting_started/api/send-device-data-to-own-server"},next:{title:"Guides Intro",permalink:"/developer_guides/developer-guides-intro"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Installation and Setup",id:"installation-and-setup",children:[]},{value:"Using the built-in bluetooth extention",id:"using-the-built-in-bluetooth-extention",children:[]},{value:"Custom software for basic BluePy usage",id:"custom-software-for-basic-bluepy-usage",children:[{value:"Scanning for Devices - Custom Code example",id:"scanning-for-devices---custom-code-example",children:[]},{value:"Connecting to a Device - Custom Code example",id:"connecting-to-a-device---custom-code-example",children:[]},{value:"Reading and Writing Characteristics - Custom Code example",id:"reading-and-writing-characteristics---custom-code-example",children:[]},{value:"Handling Notifications - Custom Code example",id:"handling-notifications---custom-code-example",children:[]},{value:"Error Handling - Custom Code example",id:"error-handling---custom-code-example",children:[]}]},{value:"Complete Application - Custom Code example",id:"complete-application---custom-code-example",children:[]},{value:"Further Resources",id:"further-resources",children:[]}],u={toc:d};function f(e){var n=e.components,o=(0,r.Z)(e,c);return(0,a.kt)("wrapper",(0,i.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bluepy-ble-guide-for-autopi-edge-devices"},"BluePy BLE Guide for AutoPi Edge devices"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"AutoPi Core relies on BluePy and Bluez packages built into the Linux core on the device. "),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AutoPi TMU CM4 or AutoPi CAN-FD Pro device")),(0,a.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Enable bluetooth from Advanced settings:\n",(0,a.kt)("img",{alt:"Enable bluetoth",src:t(27015).Z}))),(0,a.kt)("h2",{id:"using-the-built-in-bluetooth-extention"},"Using the built-in bluetooth extention"),(0,a.kt)("p",null,"It is possible to use the ",(0,a.kt)("a",{parentName:"p",href:"/core/commands/core-commands-bluetooth/#bluetoothscan"},"bluetooth.scan")," command to remote scanning for bluetooth device using the built in cloud terminal."),(0,a.kt)("h2",{id:"custom-software-for-basic-bluepy-usage"},"Custom software for basic BluePy usage"),(0,a.kt)("p",null,"A great example of using the AutoPi edge devices full functionality, is teh usage of ",(0,a.kt)("a",{parentName:"p",href:"/cloud/device_management/services/create-custom-services/"},"creating custom services"),". Using this extendabilty of the devices you utilize the full functionality of the bluepy library on the device.   "),(0,a.kt)("h3",{id:"scanning-for-devices---custom-code-example"},"Scanning for Devices - Custom Code example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from bluepy.btle import Scanner, DefaultDelegate\n\nclass ScanDelegate(DefaultDelegate):\n    def __init__(self):\n        DefaultDelegate.__init__(self)\n\n    def handleDiscovery(self, dev, isNewDev, isNewData):\n        if isNewDev:\n            print(f"Discovered device {dev.addr}")\n        elif isNewData:\n            print(f"Received new data from {dev.addr}")\n\n# Initialize scanner object\nscanner = Scanner().withDelegate(ScanDelegate())\n\n# Scan for devices (timeout in seconds)\ndevices = scanner.scan(10.0)\n\n# Print discovered devices\nfor dev in devices:\n    print(f"Device {dev.addr} ({dev.addrType}), RSSI={dev.rssi} dB")\n    for (adtype, desc, value) in dev.getScanData():\n        print(f"  {desc}: {value}")\n')),(0,a.kt)("h3",{id:"connecting-to-a-device---custom-code-example"},"Connecting to a Device - Custom Code example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from bluepy.btle import Peripheral, UUID\nimport time\n\ntry:\n    # Connect to device\n    device = Peripheral("XX:XX:XX:XX:XX:XX")  # Replace with your device\'s address\n    \n    # Get all services\n    services = device.getServices()\n    \n    for service in services:\n        print(f"Service UUID: {service.uuid}")\n        \n        # Get characteristics for this service\n        characteristics = service.getCharacteristics()\n        \n        for char in characteristics:\n            print(f"  Characteristic UUID: {char.uuid}")\n            # Check if readable\n            if char.supportsRead():\n                print(f"    Value: {char.read()}")\n                \nexcept Exception as e:\n    print(f"Error: {str(e)}")\nfinally:\n    device.disconnect()\n')),(0,a.kt)("h3",{id:"reading-and-writing-characteristics---custom-code-example"},"Reading and Writing Characteristics - Custom Code example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from bluepy.btle import Peripheral, UUID\n\nclass BLEDevice:\n    def __init__(self, address):\n        self.address = address\n        self.device = None\n    \n    def connect(self):\n        self.device = Peripheral(self.address)\n        \n    def read_characteristic(self, service_uuid, char_uuid):\n        service = self.device.getServiceByUUID(UUID(service_uuid))\n        char = service.getCharacteristics(UUID(char_uuid))[0]\n        return char.read()\n        \n    def write_characteristic(self, service_uuid, char_uuid, data):\n        service = self.device.getServiceByUUID(UUID(service_uuid))\n        char = service.getCharacteristics(UUID(char_uuid))[0]\n        char.write(data)\n        \n    def disconnect(self):\n        if self.device:\n            self.device.disconnect()\n\n# Example usage\nif __name__ == "__main__":\n    device = BLEDevice("XX:XX:XX:XX:XX:XX")\n    try:\n        device.connect()\n        # Example UUIDs - replace with your device\'s UUIDs\n        service_uuid = "1800"\n        char_uuid = "2a00"\n        \n        # Read value\n        value = device.read_characteristic(service_uuid, char_uuid)\n        print(f"Read value: {value}")\n        \n        # Write value\n        device.write_characteristic(service_uuid, char_uuid, bytes([0x01]))\n    finally:\n        device.disconnect()\n')),(0,a.kt)("h3",{id:"handling-notifications---custom-code-example"},"Handling Notifications - Custom Code example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from bluepy.btle import DefaultDelegate, Peripheral\nimport time\n\nclass NotifyDelegate(DefaultDelegate):\n    def __init__(self):\n        DefaultDelegate.__init__(self)\n\n    def handleNotification(self, cHandle, data):\n        print(f"Notification from handle {cHandle}: {data}")\n\nclass BLENotifyDevice:\n    def __init__(self, address):\n        self.device = Peripheral(address)\n        self.device.setDelegate(NotifyDelegate())\n    \n    def enable_notifications(self, service_uuid, char_uuid):\n        service = self.device.getServiceByUUID(UUID(service_uuid))\n        char = service.getCharacteristics(UUID(char_uuid))[0]\n        \n        # Enable notifications by writing to the CCCD\n        notify_handle = char.getHandle() + 1\n        self.device.writeCharacteristic(notify_handle, b"\\x01\\x00")\n    \n    def wait_for_notifications(self, timeout=1.0):\n        self.device.waitForNotifications(timeout)\n    \n    def disconnect(self):\n        self.device.disconnect()\n\n# Example usage\nif __name__ == "__main__":\n    device = BLENotifyDevice("XX:XX:XX:XX:XX:XX")\n    try:\n        # Enable notifications for a characteristic\n        device.enable_notifications("service_uuid", "char_uuid")\n        \n        # Wait for notifications\n        while True:\n            if device.wait_for_notifications(1.0):\n                continue\n            print("Waiting...")\n    finally:\n        device.disconnect()\n')),(0,a.kt)("h3",{id:"error-handling---custom-code-example"},"Error Handling - Custom Code example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from bluepy.btle import Peripheral, BTLEDisconnectError, BTLEGattError\n\nclass BLEDeviceManager:\n    def __init__(self, address):\n        self.address = address\n        self.device = None\n        self.max_retries = 3\n        \n    def connect_with_retry(self):\n        for attempt in range(self.max_retries):\n            try:\n                self.device = Peripheral(self.address)\n                print("Connected successfully")\n                return True\n            except BTLEDisconnectError:\n                print(f"Connection failed, attempt {attempt + 1} of {self.max_retries}")\n                time.sleep(1)\n        return False\n    \n    def safe_read_characteristic(self, service_uuid, char_uuid):\n        try:\n            service = self.device.getServiceByUUID(UUID(service_uuid))\n            char = service.getCharacteristics(UUID(char_uuid))[0]\n            return char.read()\n        except BTLEGattError as e:\n            print(f"GATT error: {str(e)}")\n        except BTLEDisconnectError:\n            print("Device disconnected")\n            self.connect_with_retry()\n        return None\n')),(0,a.kt)("h2",{id:"complete-application---custom-code-example"},"Complete Application - Custom Code example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from bluepy.btle import Scanner, Peripheral, DefaultDelegate, BTLEDisconnectError\nimport time\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass BLEDeviceManager:\n    def __init__(self, target_name):\n        self.target_name = target_name\n        self.device = None\n        self.target_address = None\n        \n    def scan_for_device(self, timeout=10):\n        scanner = Scanner()\n        devices = scanner.scan(timeout)\n        \n        for dev in devices:\n            for (adtype, desc, value) in dev.getScanData():\n                if desc == "Complete Local Name" and value == self.target_name:\n                    self.target_address = dev.addr\n                    logger.info(f"Found device: {self.target_address}")\n                    return True\n        return False\n    \n    def connect(self):\n        if not self.target_address:\n            raise ValueError("No device address available")\n            \n        try:\n            self.device = Peripheral(self.target_address)\n            logger.info("Connected successfully")\n            return True\n        except BTLEDisconnectError as e:\n            logger.error(f"Connection failed: {str(e)}")\n            return False\n            \n    def discover_services(self):\n        services = self.device.getServices()\n        for service in services:\n            logger.info(f"Service: {service.uuid}")\n            chars = service.getCharacteristics()\n            for char in chars:\n                logger.info(f"  Characteristic: {char.uuid}")\n                \n    def disconnect(self):\n        if self.device:\n            self.device.disconnect()\n            logger.info("Disconnected")\n\nif __name__ == "__main__":\n    manager = BLEDeviceManager("MyDevice")  # Replace with your device name\n    \n    try:\n        if manager.scan_for_device():\n            if manager.connect():\n                manager.discover_services()\n                # Add your device-specific operations here\n                time.sleep(5)  # Keep connection alive for 5 seconds\n    finally:\n        manager.disconnect()\n')),(0,a.kt)("p",null,"This example provides a complete application structure that you can adapt for your specific needs."),(0,a.kt)("h2",{id:"further-resources"},"Further Resources"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"BluePy Documentation"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/IanHarvey/bluepy"},"GitHub Repository")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/IanHarvey/bluepy/wiki"},"Wiki"))))))}f.isMDXComponent=!0},27015:function(e,n,t){"use strict";n.Z=t.p+"assets/images/bluetooth_enable-5705429877829bb3123059cb2927474f.jpg"}}]);