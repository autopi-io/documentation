(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{147:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return d})),a.d(t,"default",(function(){return c}));var r=a(3),n=a(7),o=(a(0),a(156)),i={id:"how-to-export-data-from-api",title:"How to export data from API"},l={unversionedId:"guides/api/how-to-export-data-from-api",id:"guides/api/how-to-export-data-from-api",isDocsHomePage:!1,title:"How to export data from API",description:"\u200b",source:"@site/docs/guides/api/how_to_export_data_from_api.md",slug:"/guides/api/how-to-export-data-from-api",permalink:"/guides/api/how-to-export-data-from-api",version:"current",sidebar:"guidesSidebar",previous:{title:"Introduction",permalink:"/guides/guides-intro"},next:{title:"Send device data to own server",permalink:"/guides/api/send-device-data-to-own-server"}},d=[{value:"Aggregated data",id:"aggregated-data",children:[{value:"Example",id:"example",children:[]},{value:"Field",id:"field",children:[]}]},{value:"Raw data",id:"raw-data",children:[{value:"Example",id:"example-1",children:[]}]},{value:"How to export trips",id:"how-to-export-trips",children:[]}],p={toc:d};function c(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.a)("wrapper",Object(r.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.a)("p",null,"\u200b\nThe API has endpoints that allows the user to retrieve all the telemetry data from devices.\nThere is two different endpoint available.\n\u200b"),Object(o.a)("h2",{id:"aggregated-data"},"Aggregated data"),Object(o.a)("p",null,"This data is aggregated by interval and a method (average, min, max), and is among other\nthings used for the charts in our frontend dashboard."),Object(o.a)("p",null,"The aggregated data can be retrieved by using this endpoint:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"GET /logbook/storage/read/\n")),Object(o.a)("p",null,"Additional API documentation here:"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://api.autopi.io/#/logbook/logbook_storage_read_list"},"https://api.autopi.io/#/logbook/logbook_storage_read_list")),Object(o.a)("p",null,"The endpoint takes the following parameters"),Object(o.a)("table",null,Object(o.a)("thead",{parentName:"table"},Object(o.a)("tr",{parentName:"thead"},Object(o.a)("th",{parentName:"tr",align:"right"},"Parameter"),Object(o.a)("th",{parentName:"tr",align:"left"},"Description"))),Object(o.a)("tbody",{parentName:"table"},Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"device_id"),Object(o.a)("td",{parentName:"tr",align:"left"},"ID of the device ",Object(o.a)("strong",{parentName:"td"},"(not the unit_id)"))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"field"),Object(o.a)("td",{parentName:"tr",align:"left"},"The field that the value should be retrieved from. See 'Field' below")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"field_type"),Object(o.a)("td",{parentName:"tr",align:"left"},"The type of the field. See 'Field' below. ","[float, geo_point, string, long]")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"from_utc"),Object(o.a)("td",{parentName:"tr",align:"left"},'From time in UTC. ISO format. "2020-01-01T00:00:00.000Z"')),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"to_utc"),Object(o.a)("td",{parentName:"tr",align:"left"},'To time in UTC. ISO format. "2020-01-01T00:00:00.000Z"')),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"interval"),Object(o.a)("td",{parentName:"tr",align:"left"},"This is the interval to use when aggregating. ie. data for 24 hour queried with interval set to '1h' will return 24 data points, one for each hour. Ignored when aggregation is set to 'none'")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"aggregation"),Object(o.a)("td",{parentName:"tr",align:"left"},"Method used when aggregating data into the specified interval. ","[average, min, max, none]",".")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"size"),Object(o.a)("td",{parentName:"tr",align:"left"},"Only used when aggregation is set to 'none', and will then return non aggregated values.")))),Object(o.a)("h3",{id:"example"},"Example"),Object(o.a)("p",null,"How get logged altitude aggregated into 1 minute average values"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"GET /logbook/storage/read/\n    ?device_id=6a6c53b5-e18e-4301-9c95-2516006bf7c6\n    &field=track.pos.alt\n    &field_type=float\n    &aggregation=avg\n    &from_utc=2020-07-06T10:03:36.352Z\n    &to_utc=2020-07-06T12:18:14.050Z\n    &interval=1m\n")),Object(o.a)("h3",{id:"field"},"Field"),Object(o.a)("p",null,"To know which fields you can retrieve data from, you can get the list from the following endpoint:"),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://api.autopi.io/#/logbook/logbook_storage_fields_list"},"https://api.autopi.io/#/logbook/logbook_storage_fields_list")),Object(o.a)("p",null,"This will return all the available fields that can be queried, including the type of the field.\nThe data type can be derived from the fields, like so:"),Object(o.a)("table",null,Object(o.a)("thead",{parentName:"table"},Object(o.a)("tr",{parentName:"thead"},Object(o.a)("th",{parentName:"tr",align:"left"},"Field"),Object(o.a)("th",{parentName:"tr",align:"left"},"Datatype"))),Object(o.a)("tbody",{parentName:"table"},Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.speed.value"),Object(o.a)("td",{parentName:"tr",align:"left"},"obd.speed")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.bat.level"),Object(o.a)("td",{parentName:"tr",align:"left"},"obd.bat")))),Object(o.a)("p",null,"etc."),Object(o.a)("p",null,"This is the list of data types currently available from a standard device."),Object(o.a)("table",null,Object(o.a)("thead",{parentName:"table"},Object(o.a)("tr",{parentName:"thead"},Object(o.a)("th",{parentName:"tr",align:"left"},"Datatype"))),Object(o.a)("tbody",{parentName:"table"},Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"acc.xyz")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"ec2x.data_usage")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.ambiant_air_temp")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.bat")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.coolant_temp")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.engine_load")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.fuel_level")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.intake_temp")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.rpm")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"obd.speed")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"rpi.temp")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"left"},"track.pos")))),Object(o.a)("p",null,"\u200b"),Object(o.a)("h2",{id:"raw-data"},"Raw data"),Object(o.a)("p",null,"The raw data is not aggregated or treated in any way, it is in the same format as it was when it was sent by the device. Remember to keep the time frame of your search narrows to be sure you'll get data back."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"GET /logbook/storage/raw/\n")),Object(o.a)("p",null,Object(o.a)("a",{parentName:"p",href:"https://api.autopi.io/#/logbook/logbook_storage_raw_list"},"https://api.autopi.io/#/logbook/logbook_storage_raw_list")),Object(o.a)("table",null,Object(o.a)("thead",{parentName:"table"},Object(o.a)("tr",{parentName:"thead"},Object(o.a)("th",{parentName:"tr",align:"right"},"Parameter"),Object(o.a)("th",{parentName:"tr",align:"left"},"Description"))),Object(o.a)("tbody",{parentName:"table"},Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"device_id"),Object(o.a)("td",{parentName:"tr",align:"left"},"ID of the device ",Object(o.a)("strong",{parentName:"td"},"(not the unit id)"))),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"data_type"),Object(o.a)("td",{parentName:"tr",align:"left"},"The datatype to retrieve. See 'Field' above.")),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"start_utc"),Object(o.a)("td",{parentName:"tr",align:"left"},'From time in UTC. ISO format. "2020-01-01T00:00:00.000Z"')),Object(o.a)("tr",{parentName:"tbody"},Object(o.a)("td",{parentName:"tr",align:"right"},"end_utc"),Object(o.a)("td",{parentName:"tr",align:"left"},'To time in UTC. ISO format. "2020-01-01T00:00:00.000Z"')))),Object(o.a)("h3",{id:"example-1"},"Example"),Object(o.a)("p",null,"How get logged position objects raw"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"GET logbook/storage/raw/\n    ?device_id=6a6c53b5-e18e-4301-9c95-2516006bf7c6\n    &data_type=track.pos\n    &start_utc=2020-11-24T10:13:21.276594Z\n    &end_utc=2020-11-24T11:07:07.177850Z\n")),Object(o.a)("h2",{id:"how-to-export-trips"},"How to export trips"),Object(o.a)("p",null,"To get trips data you will have to first retrieve the list of trips, and then retrieve the data\nthat you need for the duration of the trip."),Object(o.a)("p",null,"The trips endpoint here can give you the trips. (The trips can also be exported to excel/csv\nformat from the trips page) ",Object(o.a)("a",{parentName:"p",href:"https://api.autopi.io/#/logbook/logbook_trips_list"},"https://api.autopi.io/#/logbook/logbook_trips_list")),Object(o.a)("p",null,"The reason that there is no single endpoint way to retrieve all data for a specific trip is because\nthere can be a lot of data for trips, and our system can query and filter very large amounts of data\nvery very fast, but the downside is that it is not really geared towards downloading large amounts\nof data in one go."),Object(o.a)("p",null,"For enterprise customers we also support automatic exporting of trips which will call a webhook on\nan external system signalling that an export can be downloaded."))}c.isMDXComponent=!0},156:function(e,t,a){"use strict";a.d(t,"a",(function(){return m}));var r=a(0),n=a.n(r);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=n.a.createContext({}),c=function(e){var t=n.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},g=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),g=c(a),m=r,s=g["".concat(i,".").concat(m)]||g[m]||b[m]||o;return a?n.a.createElement(s,l(l({ref:t},p),{},{components:a})):n.a.createElement(s,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}g.displayName="MDXCreateElement"}}]);