(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[8757],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(n),p=o,k=u["".concat(l,".").concat(p)]||u[p]||s[p]||a;return n?r.createElement(k,m(m({ref:t},c),{},{components:n})):r.createElement(k,m({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,m=new Array(a);m[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,m[1]=i;for(var d=2;d<a;d++)m[d]=n[d];return r.createElement.apply(null,m)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34810:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(22122),o=n(19756),a=(n(67294),n(3905)),m=["components"],i={id:"core-commands-modem",title:"Modem"},l=void 0,d={unversionedId:"core/commands/core-commands-modem",id:"core/commands/core-commands-modem",isDocsHomePage:!1,title:"Modem",description:"modem.connection",source:"@site/docs/core/commands/modem.md",sourceDirName:"core/commands",slug:"/core/commands/core-commands-modem",permalink:"/core/commands/core-commands-modem",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/modem.md",tags:[],version:"current",frontMatter:{id:"core-commands-modem",title:"Modem"},sidebar:"coreSidebar",previous:{title:"Minionutil",permalink:"/core/commands/core-commands-minionutil"},next:{title:"Mosquitto",permalink:"/core/commands/core-commands-mosquitto"}},c=[{value:"<code>modem.connection</code>",id:"modemconnection",children:[]},{value:"<code>modem.help</code>",id:"modemhelp",children:[]},{value:"<code>modem.manage</code>",id:"modemmanage",children:[]},{value:"<code>modem.read_sms</code>",id:"modemread_sms",children:[]},{value:"<code>modem.reset</code>",id:"modemreset",children:[]}],s={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,m);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"modemconnection"},(0,a.kt)("inlineCode",{parentName:"h2"},"modem.connection")),(0,a.kt)("p",null,"Queries a given connection class command."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ARGUMENTS")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"cmd"))," (str): The command to query.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"modemhelp"},(0,a.kt)("inlineCode",{parentName:"h2"},"modem.help")),(0,a.kt)("p",null,"Shows this help information."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"modemmanage"},(0,a.kt)("inlineCode",{parentName:"h2"},"modem.manage")),(0,a.kt)("p",null,"Runtime management of the underlying service instance."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"SUPPORTED COMMANDS")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"hook list|call <name> [argument]... [<key>=<value>]...")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"worker list|show|start|pause|resume|kill <name>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reactor list|show <name>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"run <key>=<value>..."))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"EXAMPLES")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage hook list")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage hook call connection_handler status")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage worker list *")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage worker show *")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage worker start *")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage worker pause *")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage worker resume *")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage worker kill *")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage reactor list")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"modem.manage reactor show *")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'modem.manage run handler="connection" args="[\\"status\\"]"'))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"modemread_sms"},(0,a.kt)("inlineCode",{parentName:"h2"},"modem.read_sms")),(0,a.kt)("p",null,"Reads SMS messages stored in the modem and processes them into ",(0,a.kt)("inlineCode",{parentName:"p"},"system/sms/received")," events.\nThose events hold information such as the timestamp of the message (when it was received by the\nmodem), the sender and the text."),(0,a.kt)("p",null,"Optional parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"clear (bool): Should the messages be deleted from the modem after being processed? Default: False.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"modemreset"},(0,a.kt)("inlineCode",{parentName:"h2"},"modem.reset")),(0,a.kt)("p",null,"Enable or disable the one shot or periodic unit reset."),(0,a.kt)("p",null,"Optional parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"mode (string): The mode in which to operate the command. For available values, look below. Default: None."),(0,a.kt)("li",{parentName:"ul"},"delay (number): Time interval in minutes after that the unit reboots. Default: 0."),(0,a.kt)("li",{parentName:"ul"},'reason (str): The reason the reset was performed. Default: "unspecified".')),(0,a.kt)("p",null,"Available modes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"disabled: Disables unit reset."),(0,a.kt)("li",{parentName:"ul"},"one_shot: Enables the unit reset only one time (one shot reset)."),(0,a.kt)("li",{parentName:"ul"},"periodic: Enables periodic resets of the unit.")))}u.isMDXComponent=!0}}]);