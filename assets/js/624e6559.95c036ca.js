(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[6236],{3905:function(e,t,o){"use strict";o.d(t,{Zo:function(){return u},kt:function(){return d}});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(o),d=n,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||a;return o?r.createElement(m,i(i({ref:t},u),{},{components:o})):r.createElement(m,i({ref:t},u))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}p.displayName="MDXCreateElement"},22943:function(e,t,o){"use strict";o.d(t,{$:function(){return n}});var r=o(67294),n=function(e){var t=e.title,o=e.url;return r.createElement(r.Fragment,null,r.createElement("h2",null,"Discussion"),r.createElement("p",null,"If you'd like to discuss this topic with us or other fellow community members, you can do so on our community page dedicated for this guide: ",r.createElement("a",{href:o},t),"."))}},34923:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return h},default:function(){return d}});var r=o(22122),n=o(19756),a=(o(67294),o(3905)),i=o(22943),s=["components"],l={id:"create-custom-workers",title:"Create Custom Workers"},c=void 0,u={unversionedId:"cloud/device_management/services/create-custom-workers",id:"cloud/device_management/services/create-custom-workers",isDocsHomePage:!1,title:"Create Custom Workers",description:"In this guide we are going to take a look at how to create workers for any service that is",source:"@site/docs/cloud/device_management/services/create_custom_workers.mdx",sourceDirName:"cloud/device_management/services",slug:"/cloud/device_management/services/create-custom-workers",permalink:"/cloud/device_management/services/create-custom-workers",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/cloud/device_management/services/create_custom_workers.mdx",tags:[],version:"current",frontMatter:{id:"create-custom-workers",title:"Create Custom Workers"},sidebar:"sidebar",previous:{title:"Create Custom Triggers",permalink:"/cloud/device_management/services/create-custom-triggers"},next:{title:"Jobs",permalink:"/cloud/device_management/cloud-jobs"}},h=[{value:"Workers",id:"workers",children:[{value:"Let&#39;s Create a Worker",id:"lets-create-a-worker",children:[]},{value:"Workflows",id:"workflows",children:[]},{value:"Hooks",id:"hooks",children:[]},{value:"Troubleshooting Your Service",id:"troubleshooting-your-service",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],p={toc:h};function d(e){var t=e.components,l=(0,n.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this guide we are going to take a look at how to create workers for any service that is\navailable, be it a default service like the OBD manager or a custom one that you've made for\nyourselves. First off we're going to explore what can workers be used for and later on in the guide\nwe're going to go through creating an example worker that is going to fetch OBD data and save that\ndata to a file. Let's get started!"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Service list",src:o(33837).Z})," "),(0,a.kt)("h2",{id:"workers"},"Workers"),(0,a.kt)("p",null,"Now, the real deal - workers. Workers are simply a process that is going to be executed by a\nmanager in a specific ",(0,a.kt)("a",{parentName:"p",href:"/core/services/core-services-intro"},"workflow")," that is going to eventually yield a\ndesired output. Workflows are a number of steps that are going to be executed in order to create\nthat desired output:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Worker list",src:o(81157).Z})," "),(0,a.kt)("h3",{id:"lets-create-a-worker"},"Let's Create a Worker"),(0,a.kt)("p",null,"First off, you'll need to decide which manager to use. That really depends on the use case you\nhave. For example, if you would like to read OBD data, the obd_manager would make the most sense.\nIf on the other hand you would like to execute some AT command that isn't implemented by default,\nthe ec2x_manager is the one you'd be looking at."),(0,a.kt)("p",null,"For the purposes of this guide, we will create a worker inside the obd_manager that will be\nfetching some data. We will navigate to the services page (Device > Services) and select the\nobd_manager entry on the screen."),(0,a.kt)("p",null,"The new page that opens up is the home page for the obd_manager where all of its workers reside.\nWe will create a new worker now. Click on the '+ Create' button to open up the creation window."),(0,a.kt)("p",null,"You'll be presented with the following window:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Create empty worker",src:o(73242).Z})," "),(0,a.kt)("p",null,"Let's now get familiar with the interface. There are a few fields that need filling out and then\nwe will move on to the workflows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Name"),": The name of the worker. This is just for recognizability of the worker.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Delay"),": This is the delay before the initial start of execution of the worker. This means\nthat the worker will wait ",(0,a.kt)("em",{parentName:"p"},"X")," amount of seconds before initiating the first loop.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Interval"),": This is the interval between each loop of the worker. As we'll see below, you are\nable to set the worker to execute multiple times (which is why they're so useful). The interval\nwill be the time that it takes between each execution.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Loop"),": This is the amount of times the worker will execute within a power cycle of the AutoPi\ndevice. You can set this to the following values:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"less than 0"),": The worker will loop forever and execute the workflow every time"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"0 or more"),": The worker will loop the amount of times specified and then stop. This can be\nused if you want the worker to do a specified amount of work and then stop working. The total\namount of executions that will occur are equal to the loop count + 1."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Order"),": This is the order that the workers are going to be executed in. This is a more\n'global' field, meaning that it will affect the execution of the rest of the workers in this\nservice as well. The lowest ordered worker will execute first and then go up from there.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Transactional"),": This option is useful if there are multiple workflows on the same worker. If\none of the workflows fails, if transactional is enabled, then all the rest of the workflows won't\nbe executed. On the other hand, if it isn't enabled, the rest of the workflows will still be\nexecuted."))),(0,a.kt)("h3",{id:"workflows"},"Workflows"),(0,a.kt)("p",null,"Now that we've gone through the basic options, let's take a look at the possibilities for\nworkflows. Creating a workflow adds a new row on the table below. This is the basic representation\nof a workflow. The columns in the table are as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Handler")," - handlers are the first step in the workflow. They will communicate with the\ndevice's hardware and produce the initial output.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"args")," - the arguments that are to be passed to the handler.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"kwargs")," - the key word arguments that are to be passed to the handler.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Converter")," - they transform the data to another, usually more usable, form.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Trigger")," - this is usually the code that decides whether to do something based on the result\nof the handler, for example, ",(0,a.kt)("a",{parentName:"p",href:"https://community.autopi.io/t/custom-code-write-custom-trigger-to-play-beep-sound-when-speeding/1566"},"making a beep sound from the device"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Filter")," - filters are responsible for deciding whether the data that is currently being\nmanipulated is significant or not. They can stop the flow of execution if they return something\nthat is considered ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-how-is-it-different-from-true-and-false"},"falsy")," -\nfor example a value of ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),", an empty string, and so on. ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Enricher")," - enrichers.. well.. enrich the data. They add additional data, possibly by\ncomputing the result.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returner")," - returners are responsible for returning the result somewhere. For example,\n",(0,a.kt)("a",{parentName:"p",href:"https://community.autopi.io/t/custom-code-redirect-logged-data-and-store-it-in-a-file-or-anywhere/1521"},"saving the result on a file"),"\nor sending it over the internet to some cloud solution. A prime example for a returner is the\ncloud returner that is responsible for saving the data on my.autopi.io"))),(0,a.kt)("p",null,"All of the above (except for args and kwargs) are also called ",(0,a.kt)("em",{parentName:"p"},"hooks"),". We will look into them in\nthe next section."),(0,a.kt)("p",null,"Different services have different defaults handlers. The best place to take a look at those\nhandlers is ",(0,a.kt)("a",{parentName:"p",href:"/core/services/core-services-intro"},"the services page"),". Since the idea we're going for in this\nguide is to invoke continuous OBD query commands, we're going to be using the\n",(0,a.kt)("a",{parentName:"p",href:"/core/services/core-services-obd-manager/#query"},"query")," handler."),(0,a.kt)("p",null,"The arguments (args) and key-word arguments (kwargs) are specified in JSON format (this means\ndouble quotes instead of single quotes, it took me a while to figure that out the other day). We\nwant to read out the fuel level every 10 seconds and record that data, so we will specify the\nfollowing arguments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[ "FUEL_LEVEL" ]\n')),(0,a.kt)("p",null,"The key-word arguments aren't essential for the worker to work, however they give more control over\nhow it'll operate, so we'll specify the following kwargs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "mode": 1,\n    "force": true\n}\n')),(0,a.kt)("p",null,"Now we've got the first part of a workflow going. From here on out, everything else is optional\ndepending on your needs. Most of you would want to have some way of saving the data however, for\nwhich you can use a returner. You can view a guide about that ",(0,a.kt)("a",{parentName:"p",href:"https://community.autopi.io/t/custom-code-redirect-logged-data-and-store-it-in-a-file-or-anywhere/1521"},"here"),".\nHere's the final result:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Create worker completed",src:o(94515).Z})),(0,a.kt)("p",null,"The last thing you need to do is to hit Save and let the device sync up with the new changes. After\na service restart, the device should be executing your new service worker."),(0,a.kt)("h3",{id:"hooks"},"Hooks"),(0,a.kt)("p",null,"You can create your own custom hooks by creating a new custom module (Device > Custom Code) with\nan execution type, but you have to register them to each individual service through the Hooks tab.\nEach hook needs to have this specific signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def some_function_name(result):\n    # work with result and return some manipulated value\n    return value\n")),(0,a.kt)("p",null,"The important part is that the function receives some result and returns some value. Based on the\noutput of each hook the workflow might be interrupted. If falsy values are returned at a specific\npoint in the workflow, the rest of the workflow will stop. ",(0,a.kt)("strong",{parentName:"p"},"This isn't the case")," with triggers -\nthey will always execute, as the logic there might be very valuable to be executed even if there is\nan interruption. Even in the case of a thrown exception the trigger will still execute."),(0,a.kt)("h3",{id:"troubleshooting-your-service"},"Troubleshooting Your Service"),(0,a.kt)("h4",{id:"my-service-doesnt-start--i-dont-see-any-logs-from-my-service"},"My service doesn't start / I dont see any logs from my service"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Check that the service is enabled in the cloud, and check that it is part of the engines file in\n",(0,a.kt)("inlineCode",{parentName:"li"},"/etc/salt/minion.d/engines.conf")),(0,a.kt)("li",{parentName:"ol"},"Check that the associated custom module has valid code"),(0,a.kt)("li",{parentName:"ol"},"Turn on debug logging on the device (In advanced settings), and restart the salt-minion, and\nthen look for errors.")),(0,a.kt)("p",null,"You can use the following command to grep for the specific service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo tail -f /var/log/salt/minion | grep service_name\n")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"As a closer - workers are extremely powerful if used correctly. They can execute continuously or a\nset amount of times. Workflows within the worker can be set up so that the desired outcome is\nreached without having to write complicated custom code. Use them to your advantage whenever you\nwant to communicate something with the hardware components of the AutoPi or with your car directly."),(0,a.kt)(i.$,{title:"Create Service Workers",url:"https://community.autopi.io/t/guide-create-service-workers/2311",mdxType:"Discussion"}),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In case you have any questions, don't hesitate to contact us at ",(0,a.kt)("a",{parentName:"p",href:"mailto:support@autopi.io"},"support@autopi.io"),"."))))}d.isMDXComponent=!0},94515:function(e,t,o){"use strict";t.Z=o.p+"assets/images/create_worker_completed-babf7eb9856d1ebfd69aadc8949cf5f1.png"},73242:function(e,t,o){"use strict";t.Z=o.p+"assets/images/create_worker_empty-71d8c90e2c58922cd790439ee9ba9770.png"},33837:function(e,t,o){"use strict";t.Z=o.p+"assets/images/service_list-4a3c4dcc479987f4db49b227ea1d4fb9.png"},81157:function(e,t,o){"use strict";t.Z=o.p+"assets/images/worker_list-9fea8776e207e67ecd556c950558cec6.png"}}]);