"use strict";(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[6540],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},58162:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);const o="homeGrid_MM9h",i="cardGrid_IPp8";var s=t(74848);const a=e=>{let{children:n,home:t=!1}=e;return(0,s.jsx)("div",{className:t?o:i,children:n})}},81923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"cloud/obd-ii/using-the-can-bus-commands","title":"Using the CAN Bus Commands","description":"Working with the CAN bus is on your own risk. Playback and sending commands to the vehicle can be","source":"@site/docs/cloud/obd-ii/using_the_can_bus_commands.md","sourceDirName":"cloud/obd-ii","slug":"/cloud/obd-ii/using-the-can-bus-commands","permalink":"/cloud/obd-ii/using-the-can-bus-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/autopi-io/documentation/edit/master/docs/cloud/obd-ii/using_the_can_bus_commands.md","tags":[],"version":"current","frontMatter":{"id":"using-the-can-bus-commands","title":"Using the CAN Bus Commands"},"sidebar":"sidebar","previous":{"title":"Log Raw CAN Messages","permalink":"/cloud/obd-ii/log-raw-can-messages"},"next":{"title":"Automatic OBD Logger Pausing","permalink":"/cloud/obd-ii/automatic-obd-logger-pausing"}}');var i=t(74848),s=t(28453);t(58162);const a={id:"using-the-can-bus-commands",title:"Using the CAN Bus Commands"},r=void 0,d={},h=[{value:"Sending PID&#39;s",id:"sending-pids",level:2},{value:"The CAN Interface",id:"the-can-interface",level:2},{value:"Setting the Protocol",id:"setting-the-protocol",level:3},{value:"Dumping/Reading Data From the CAN Bus",id:"dumpingreading-data-from-the-can-bus",level:3},{value:"Playback of a Recorded File",id:"playback-of-a-recorded-file",level:3},{value:"Sending a Single Message",id:"sending-a-single-message",level:3},{value:"Non-OBD2 Queries",id:"non-obd2-queries",level:3},{value:"Using the Cloud CAN Analyzer",id:"using-the-cloud-can-analyzer",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Working with the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus is on your own risk. Playback and sending commands to the vehicle can be\nused to control functions in the vehicle affecting the behavior of the vehicle. We recommend that\nyou NEVER do testing on a vehicle in motion and that you have the parking brake enabled while you\ntest."]})}),"\n",(0,i.jsxs)(n.p,{children:["In this guide, we will explore how you can communicate and interact with your vehicle's ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus.\nTypically, there are two types of ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," busses."]}),"\n",(0,i.jsxs)(n.p,{children:["One type responds to requests for data, that is to say, it almost acts like an HTTP server - it\nreceives a request for a specific data point (let's say speed or RPM) and it sends the requested\ndata back. This type of ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus is usually handled with PIDs."]}),"\n",(0,i.jsxs)(n.p,{children:["The second type sends all the vehicle's data on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus. This means that there is going to be\nlarge amounts of data being streamed. We call this type of data ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Messages. Within those ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"}),"\nmessages are the so-called ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," signals. Each signal usually represents a specific data point, like\nspeed or RPM."]}),"\n",(0,i.jsx)(n.h2,{id:"sending-pids",children:"Sending PID's"}),"\n",(0,i.jsxs)(n.p,{children:["Let's start off with the ",(0,i.jsx)(n.a,{href:"/core/commands/core-commands-obd/#obdquery",children:(0,i.jsx)(n.code,{children:"obd.query"})})," command. This command is\nused to query the first type of ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," busses. Let's take a look at an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"obd.query test mode=01 pid=0C\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["You may need to add the ",(0,i.jsx)(n.code,{children:"force=True"})," parameter to make sure the ECU in the vehicle accepts the\ncommand."]})}),"\n",(0,i.jsxs)(n.p,{children:["This command can be run from ",(0,i.jsx)(n.a,{href:"https:/my.autopi.io",children:"my.autopi.io"})," or\n",(0,i.jsx)(n.a,{href:"http://local.auotpi.io",children:"local.autopi.io"}),"'s web consoles. Let's try to explain each element of the\ncommand. Firstly, ",(0,i.jsx)(n.code,{children:"obd.query"})," - that is simply the command that we're attempting to execute. Next is\n",(0,i.jsx)(n.code,{children:"test"}),". This is the name that the PID will use. It makes no difference to the comand's execution\nwhat the name is going to be, but if you end up setting up a logger, the name will be used to save\nthat data on your account, so you can later reference it using the name to create a widget."]}),"\n",(0,i.jsxs)(n.p,{children:["Next, there is the ",(0,i.jsx)(n.code,{children:"mode=01"})," and ",(0,i.jsx)(n.code,{children:"pid=0C"})," pieces of the puzzle. These are the specifications of\nwhich data point you'd like to query for. In this case, we are asking the ECU of the vehicle to\nrespond with the current RPM. You can see a full list of standard PID's\n",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/OBD-II_PIDs",children:"here"}),". Your vehicle may be able to support more or less\nPID's than shown on Wikipedia."]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["If you'd like to run this command directly\nfrom the device (through ",(0,i.jsx)(n.a,{href:"/developer_guides/how-to-ssh-to-your-device",children:"SSH"})," or similar), you will need to\nprepend the ",(0,i.jsx)(n.code,{children:"autopi"})," keyword, like so:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"autopi obd.query test mode=01 pid=0C\n"})})]}),"\n",(0,i.jsxs)(n.h2,{id:"the-can-interface",children:["The ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Interface"]}),"\n",(0,i.jsxs)(n.p,{children:["The CAN interface is somewhat different than just sending standard PID's. It relies more on\nparcing the full data stream on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus. This is far more advanced, but it also opens up to a\nwhole new level of fun."]}),"\n",(0,i.jsx)(n.h3,{id:"setting-the-protocol",children:"Setting the Protocol"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://www.autopi.io",children:"AutoPi"})," is able to support a wide range of protocols. When you insert it into your vehicle it\nwill try to autodetect the protocol used by the vehicle. It is not always going to be the case that\nthe same protocol is used for all ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," traffic. In fact, ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," traffic may flow on more than one\nprotocol in your vehicle. Switching the protocol on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io",children:"AutoPi"})," makes it listen for traffic on\ndifferent electrical pins. You can check the current protocol settings using this command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"obd.protocol\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will give you a list of all the protocols you can set. Changing the protocol can be done with\nthis command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"obd.protocol set=<num>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where ",(0,i.jsx)(n.code,{children:"<num>"})," is the protocol number."]}),"\n",(0,i.jsxs)(n.h3,{id:"dumpingreading-data-from-the-can-bus",children:["Dumping/Reading Data From the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Bus"]}),"\n",(0,i.jsxs)(n.p,{children:["The new interface opens up for dumping data from the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus on the protocol selected. This can be\ndone using the ",(0,i.jsx)(n.a,{href:"/core/commands/core-commands-obd/#obddump",children:(0,i.jsx)(n.code,{children:"obd.dump"})})," command. Using the command is very easy:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"obd.dump duration=5\n"})}),"\n",(0,i.jsx)(n.p,{children:"Optional parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"duration=<seconds>"}),": How many seconds to record data. Default is ",(0,i.jsx)(n.code,{children:"2"})," seconds."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file=<path>"}),": Write data to a file instead of displaying it on the screen."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This will dump a list of messages recorded within 5 seconds of starting the execution of the\ncommand. Those messages might not make much sense at first glance, but that's okay. Usually, DBC\nfiles are used to parse those messages into human readable data."}),"\n",(0,i.jsx)(n.h3,{id:"playback-of-a-recorded-file",children:"Playback of a Recorded File"}),"\n",(0,i.jsxs)(n.p,{children:["A file recorded with the ",(0,i.jsx)(n.code,{children:"obd.dump"})," command can be played/replayed to the vehicle using the\n",(0,i.jsx)(n.a,{href:"/core/commands/core-commands-obd/#obdplay",children:(0,i.jsx)(n.code,{children:"obd.play"})})," command. Here's an example usage:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"obd.play file=<path>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The will playback the entire file on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus."]}),"\n",(0,i.jsx)(n.p,{children:"Optional parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"slice=<T|B>"}),": Slice the list of messages before sending on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus. Based one the divide\nand conquer algorithm. Multiple slice characters can be specified in continuation of each other.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"T"}),": Top half of remaining result."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"B"}),": Bottom half of remaining result."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filter=<expression>"}),": Filter out messages before sending on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus. Multiple filters can\nbe specified if separated using comma characters.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"+[id][#][data]"}),": Include only messages matching string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-[id][#][data]"}),": Exclude messages matching string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"+duplicate"}),": Include only messages where duplicates exist."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-duplicate"}),": Exclude messages where duplicates exist."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"+mutate"}),": Include only messages where data mutates."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-mutate"}),": Exclude messages where data mutates."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"group=<id|msg>"}),": How to group the result of sent messages. This only affects the display\nvalues returned from this command. Default is ",(0,i.jsx)(n.code,{children:"id"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"test=<true|false>"}),": Run command in test-only (dry-run) mode. No data will be sent on ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus.\nDefault is ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'All the filter parameters can be used to find the specific commands that you are seeking. With\nfilters you can remove data that you know is not relevant for finding your specific command (like\ndata that appears a lot). With the slice parameter you can use the "divide and conquer" technique\nto find the specific command.'}),"\n",(0,i.jsx)(n.h3,{id:"sending-a-single-message",children:"Sending a Single Message"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"obd.dump"})," and the ",(0,i.jsx)(n.code,{children:"obd.play"})," commands is typically used for finding a single specific\ncommand you want to send to the car. This can be lock/unlock or something else controlling your\nvehicle."]}),"\n",(0,i.jsxs)(n.p,{children:["When you have the specific command, you can send it directly using the\n",(0,i.jsx)(n.a,{href:"/core/commands/core-commands-obd/#obdsend",children:(0,i.jsx)(n.code,{children:"obd.send"})})," command. Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"obd.send 2101#280000000003E800 expect_response=True auto_format=True\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The first part before the # is the ECU number (the header) and the last part is the data payload.\nYou may need to remove the ",(0,i.jsx)(n.code,{children:"expect_response"})," if the ECU doesn't respond on the message you've\nsend."]}),"\n",(0,i.jsx)(n.h3,{id:"non-obd2-queries",children:"Non-OBD2 Queries"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes a vehicle supports non-OBD-2 queries. An example of this is manufacturer proprietary\nprotocols. When this is the case, you need to enrich the queries with ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Flow Control parameters."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's look at an example of a proprietary query, where the request data is ",(0,i.jsx)(n.code,{children:"1AA # 02 00 01 00 00 00 00 00"}),",\nand the response is ",(0,i.jsx)(n.code,{children:"2AA # 02 XX XX 00 00 00 00 00"}),", where the ",(0,i.jsx)(n.code,{children:"XX"})," bytes are the data bytes. For\nthe sake of having the example complete, let's assume that this queries for the speed in kph. If\nwe try to do this query as we might with any other OBD-2 PID, we won't get a response. This is\nbecause the device does not know how the message looks like. This might seem pointless if these\nrequest-response messages are the only traffic on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus, however, imagine if there are hundreads\nof ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," frames being sent on the bus every second. How is the device to know which ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," frame is the\nresponse? We need to specify this manually."]}),"\n",(0,i.jsxs)(n.p,{children:["If you take a look at the ",(0,i.jsx)(n.a,{href:"/core/commands/core-commands-obd/#obdquery",children:"obd.query"})," command, you'll notice several\narguments dedicated to can flow control. The 2 relevant ones are ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"can_flow_control_filter"})})," and\n",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"can_flow_control_id_pair"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"can_flow_control_filter"})})," - filters out all non-query related can frames from the traffic. Although you\nmight get an expected response without specifying this parameter, you should still add it. The format for\nit is ",(0,i.jsx)(n.code,{children:"can_flow_control_filter=<Pattern>,<Mask>"}),". In the current example, that would look like this:\n",(0,i.jsx)(n.code,{children:"can_flow_control_filter=2AA,7FF"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"can_flow_control_id_pair"})})," - pairs the query request header (Transmitter ID) to the response header (Receiver ID)\nin format ",(0,i.jsx)(n.code,{children:"can_flow_control_id_pair=<Transmitter ID>,<Receiver ID>"}),". In this example, it would be: ",(0,i.jsx)(n.code,{children:"can_flow_control_id_pair=1AA,2AA"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"All this taken into account, the command would look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ obd.query PROPRIETARY_SPEED header=1AA mode=00 pid=01 can_flow_control_filter=2AA,7FF can_flow_control_id_pair=1AA,2AA force=True\n_stamp: '2023-08-28T12:22:31.253543'\n_type: proprietary_speed\nvalue: 2aa0200430000000000\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Next, we'll need to extract the speed data with a formula. In this case, all the data bytes correspond to\nthe data we're looking for, so we can use the simple formula of ",(0,i.jsx)(n.code,{children:"bytes_to_int(message.data)"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ obd.query PROPRIETARY_SPEED header=1AA mode=00 pid=01 can_flow_control_filter=2AA,7FF can_flow_control_id_pair=1AA,2AA force=True formula='bytes_to_int(message.data)'\n_stamp: '2023-08-28T12:22:35.052518'\n_type: proprietary_speed\nvalue: 67\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["There are a few quirks to keep in mind when working with these and with ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus in general:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["As long as the vehicle's bus is autodetected, the ",(0,i.jsx)(n.code,{children:"obd.query"})," command will try to verify that the\nprotocol is still valid by sending a known valid OBD-2 message onto the bus and waiting for a reply. If\nthe vehicle does not support standard OBD-2, this will cause the command to fail. To prevent this, either\nensure the vehicle supports OBD-2, or create a new bus, which does not have the 'autodetected' flag."]}),"\n",(0,i.jsxs)(n.li,{children:["The selected protocol's header length must match the header length of the sent/received messages. For\nexample, you can not specify ",(0,i.jsx)(n.code,{children:"protocol=7"}),", which has a 29-bit header length, and then query for an 11-bit\nmessage. You will not get the expected result. Keep in mind that there will always be a protocol selected,\neven when one is not specified in the command. When the command is being run through the logger, this will\nbe the ",(0,i.jsx)(n.code,{children:"default"})," protocol."]}),"\n"]})]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["For those closely familiar with ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," flow control, it might seem confusing that these parameters have\nthe can_flow_control_ prefix, as ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," flow control usually refers to multi-frame messages. The naming is\nrelated to how older versions of the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io",children:"AutoPi"})," communicated on the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus."]})}),"\n",(0,i.jsxs)(n.h2,{id:"using-the-cloud-can-analyzer",children:["Using the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/software-platform/cloud-management",children:"Cloud"})," ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Analyzer"]}),"\n",(0,i.jsxs)(n.p,{children:["All the above commands are how the interface to the vehicle works. We have combined all of this in\nan interactive ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Analyzer, which is accessible from the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io",children:"AutoPi"})," ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/software-platform/cloud-management",children:"Cloud"})," in\nDevice > ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Analyzer. If you don't see that menu link, you need to make sure that you've\ninstalled the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Analyzer add-on from the Add-ons page."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Analyzer makes working with your car much simpler. To find your specific command follow\nthese steps:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Configure your ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"}),' Bus interface. On the account page under "Vehicles" you can autodetect the\nmost common ',(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," Bus. If you need to work with a special ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," bus, make sure you have the right baud\nrate configured."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['Select the Bus you want to use and press record. The device will make a "beep" sound when the\nrecording begins and another one when the recording ends. Make sure that the ',(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"})," command you want\nto record is happening between the two sounds (like door unlock or window control)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The recording is now stored on the device and you can play it back immediately using the ",(0,i.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN"}),"\nplayer on the right-hand side of the screen."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You will see that a lot of data is returned from the bus, so to find the specific command for\nyour function, we recommend using the filters on the right-hand side. Typically, a lot of the data\nis repetetive, so you can start out by removing all the duplicates."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"With the filters, narrow down the results to as few as possible. Then you can replay the\ncommands one by one and see if you can find the command controlling the function you are looking\nfor."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When you have found your command you can always resend it by using the ",(0,i.jsx)(n.code,{children:"obd.send"})," command\ndescribed above."]}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);