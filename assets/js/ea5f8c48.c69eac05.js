(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[1941],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||l;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1153:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(22122),o=n(19756),l=(n(67294),n(3905)),i=["components"],a={id:"core-commands-stn",title:"Stn"},c=void 0,s={unversionedId:"core/commands/core-commands-stn",id:"core/commands/core-commands-stn",isDocsHomePage:!1,title:"Stn",description:"stn.ext_sleep",source:"@site/docs/core/commands/stn.md",sourceDirName:"core/commands",slug:"/core/commands/core-commands-stn",permalink:"/core/commands/core-commands-stn",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/stn.md",tags:[],version:"current",frontMatter:{id:"core-commands-stn",title:"Stn"},sidebar:"sidebar",previous:{title:"Spm",permalink:"/core/commands/core-commands-spm"},next:{title:"Time",permalink:"/core/commands/core-cmd-time"}},u=[{value:"<code>stn.ext_sleep</code>",id:"stnext_sleep",children:[]},{value:"<code>stn.ext_wake</code>",id:"stnext_wake",children:[]},{value:"<code>stn.help</code>",id:"stnhelp",children:[]},{value:"<code>stn.power_config</code>",id:"stnpower_config",children:[]},{value:"<code>stn.power_pin_polarity</code>",id:"stnpower_pin_polarity",children:[]},{value:"<code>stn.power_trigger_status</code>",id:"stnpower_trigger_status",children:[]},{value:"<code>stn.sleep</code>",id:"stnsleep",children:[]},{value:"<code>stn.uart_sleep</code>",id:"stnuart_sleep",children:[]},{value:"<code>stn.uart_wake</code>",id:"stnuart_wake",children:[]},{value:"<code>stn.volt_calibrate</code>",id:"stnvolt_calibrate",children:[]},{value:"<code>stn.volt_change_wake</code>",id:"stnvolt_change_wake",children:[]},{value:"<code>stn.volt_level</code>",id:"stnvolt_level",children:[]},{value:"<code>stn.volt_level_sleep</code>",id:"stnvolt_level_sleep",children:[]},{value:"<code>stn.volt_level_wake</code>",id:"stnvolt_level_wake",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"stnext_sleep"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.ext_sleep")),(0,l.kt)("p",null,"External sleep trigger configuration."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnext_wake"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.ext_wake")),(0,l.kt)("p",null,"External wake trigger configuration."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnhelp"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.help")),(0,l.kt)("p",null,"Shows this help information."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnpower_config"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.power_config")),(0,l.kt)("p",null,"Summarizes active PowerSave configuration."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnpower_pin_polarity"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.power_pin_polarity")),(0,l.kt)("p",null,"Specify whether the pin outputs a logic LOW or HIGH in low power mode."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnpower_trigger_status"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.power_trigger_status")),(0,l.kt)("p",null,"Reports last active sleep/wakeup triggers since last reset."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnsleep"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.sleep")),(0,l.kt)("p",null,"Enter sleep mode after the specified delay time.\nThe OBD connection is closed as default in order to prevent STN wake up on UART communication."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnuart_sleep"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.uart_sleep")),(0,l.kt)("p",null,"UART inactivity timeout configuration."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnuart_wake"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.uart_wake")),(0,l.kt)("p",null,"UART wakeup pulse timing configuration."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnvolt_calibrate"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.volt_calibrate")),(0,l.kt)("p",null,"Manual calibration of voltage measurement.\nDefault value ",(0,l.kt)("inlineCode",{parentName:"p"},"0000")," will restore to the factory calibration."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"value"))," (int): The value to set the calibration to. Default is 0000."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"confirm"))," (bool): Achknowledge the execution of this command. Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnvolt_change_wake"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.volt_change_wake")),(0,l.kt)("p",null,"Voltage change wakeup trigger configuration."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnvolt_level"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.volt_level")),(0,l.kt)("p",null,"Determine the current voltage level."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnvolt_level_sleep"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.volt_level_sleep")),(0,l.kt)("p",null,"Voltage level sleep trigger configuration."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"stnvolt_level_wake"},(0,l.kt)("inlineCode",{parentName:"h2"},"stn.volt_level_wake")),(0,l.kt)("p",null,"Voltage level wakeup trigger configuration."))}d.isMDXComponent=!0}}]);