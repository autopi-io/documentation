(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[625],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return s}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(t),s=o,f=u["".concat(p,".").concat(s)]||u[s]||d[s]||a;return t?r.createElement(f,c(c({ref:n},m),{},{components:t})):r.createElement(f,c({ref:n},m))}));function s(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},77561:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var r=t(22122),o=t(19756),a=(t(67294),t(3905)),c=["components"],i={id:"core-commands-openocd",title:"Openocd"},p=void 0,l={unversionedId:"core/commands/core-commands-openocd",id:"core/commands/core-commands-openocd",isDocsHomePage:!1,title:"Openocd",description:"openocd.help",source:"@site/docs/core/commands/openocd.md",sourceDirName:"core/commands",slug:"/core/commands/core-commands-openocd",permalink:"/core/commands/core-commands-openocd",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/openocd.md",tags:[],version:"current",frontMatter:{id:"core-commands-openocd",title:"Openocd"},sidebar:"sidebar",previous:{title:"Obd",permalink:"/core/commands/core-commands-obd"},next:{title:"Power",permalink:"/core/commands/core-commands-power"}},m=[{value:"<code>openocd.help</code>",id:"openocdhelp",children:[]},{value:"<code>openocd.program</code>",id:"openocdprogram",children:[]}],d={toc:m};function u(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"openocdhelp"},(0,a.kt)("inlineCode",{parentName:"h2"},"openocd.help")),(0,a.kt)("p",null,"Shows this help information."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"openocdprogram"},(0,a.kt)("inlineCode",{parentName:"h2"},"openocd.program")),(0,a.kt)("p",null,"Loads a program onto a MCU."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ARGUMENTS")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"file"))," (str): Path of program binary file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"interface_cfg"))," (str): Path of interface configuration file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"target_cfg"))," (str): Path of target configuration file.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"raise_on_error"))," (bool): Raise an error upon failure. Default is ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"start_address"))," (string): Flash memory start address in hex format (required for .bin files)")))}u.isMDXComponent=!0}}]);