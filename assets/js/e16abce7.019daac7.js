(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[8757],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),p=d(n),u=o,k=p["".concat(l,".").concat(u)]||p[u]||s[u]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m.mdxType="string"==typeof e?e:o,i[1]=m;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},34810:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var a=n(22122),o=n(19756),r=(n(67294),n(3905)),i=["components"],m={id:"core-commands-modem",title:"Modem"},l=void 0,d={unversionedId:"core/commands/core-commands-modem",id:"core/commands/core-commands-modem",isDocsHomePage:!1,title:"Modem",description:"modem.connection",source:"@site/docs/core/commands/modem.md",sourceDirName:"core/commands",slug:"/core/commands/core-commands-modem",permalink:"/core/commands/core-commands-modem",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/modem.md",tags:[],version:"current",frontMatter:{id:"core-commands-modem",title:"Modem"},sidebar:"sidebar",previous:{title:"Minionutil",permalink:"/core/commands/core-commands-minionutil"},next:{title:"Mosquitto",permalink:"/core/commands/core-commands-mosquitto"}},c=[{value:"<code>modem.connection</code>",id:"modemconnection",children:[]},{value:"<code>modem.help</code>",id:"modemhelp",children:[]},{value:"<code>modem.manage</code>",id:"modemmanage",children:[]},{value:"<code>modem.read_sms</code>",id:"modemread_sms",children:[]},{value:"<code>modem.reset</code>",id:"modemreset",children:[]}],s={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"modemconnection"},(0,r.kt)("inlineCode",{parentName:"h2"},"modem.connection")),(0,r.kt)("p",null,"Queries a given connection class command."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ARGUMENTS")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"cmd"))," (str): The command to query.")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"modem.connection execute")," is used with a command like ",(0,r.kt)("inlineCode",{parentName:"p"},"AT$GPSACP")," from bash on device, the ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," must be escaped\nwith a ",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),", so ",(0,r.kt)("inlineCode",{parentName:"p"},"AT\\$GPSACP"),". Otherwise, the ",(0,r.kt)("inlineCode",{parentName:"p"},"$GPSACP")," is interpreted as a bash variable."),(0,r.kt)("p",{parentName:"div"},"Example whole command:\n",(0,r.kt)("inlineCode",{parentName:"p"},"autopi modem.connection execute AT\\$GPSACP")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modemhelp"},(0,r.kt)("inlineCode",{parentName:"h2"},"modem.help")),(0,r.kt)("p",null,"Shows this help information."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modemmanage"},(0,r.kt)("inlineCode",{parentName:"h2"},"modem.manage")),(0,r.kt)("p",null,"Runtime management of the underlying service instance."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"SUPPORTED COMMANDS")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hook list|call <name> [argument]... [<key>=<value>]...")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"worker list|show|start|pause|resume|kill <name>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reactor list|show <name>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run <key>=<value>..."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"EXAMPLES")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage hook list")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage hook call connection_handler status")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage worker list *")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage worker show *")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage worker start *")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage worker pause *")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage worker resume *")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage worker kill *")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage reactor list")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modem.manage reactor show *")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'modem.manage run handler="connection" args="[\\"status\\"]"'))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modemread_sms"},(0,r.kt)("inlineCode",{parentName:"h2"},"modem.read_sms")),(0,r.kt)("p",null,"Reads SMS messages stored in the modem and processes them into ",(0,r.kt)("inlineCode",{parentName:"p"},"system/sms/received")," events.\nThose events hold information such as the timestamp of the message (when it was received by the\nmodem), the sender and the text."),(0,r.kt)("p",null,"Optional parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"clear (bool): Should the messages be deleted from the modem after being processed? Default: False.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"modemreset"},(0,r.kt)("inlineCode",{parentName:"h2"},"modem.reset")),(0,r.kt)("p",null,"Enable or disable the one shot or periodic unit reset."),(0,r.kt)("p",null,"Optional parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"mode (string): The mode in which to operate the command. For available values, look below. Default: None."),(0,r.kt)("li",{parentName:"ul"},"delay (number): Time interval in minutes after that the unit reboots. Default: 0."),(0,r.kt)("li",{parentName:"ul"},'reason (str): The reason the reset was performed. Default: "unspecified".')),(0,r.kt)("p",null,"Available modes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"disabled: Disables unit reset."),(0,r.kt)("li",{parentName:"ul"},"one_shot: Enables the unit reset only one time (one shot reset)."),(0,r.kt)("li",{parentName:"ul"},"periodic: Enables periodic resets of the unit.")))}p.isMDXComponent=!0}}]);