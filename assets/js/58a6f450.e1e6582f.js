"use strict";(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[7472],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var o=s(96540);const r={},d=o.createContext(r);function i(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(d.Provider,{value:n},e.children)}},76761:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>o,toc:()=>t});const o=JSON.parse('{"id":"core/commands/core-commands-power","title":"Power","description":"power.help","source":"@site/docs/core/commands/power.md","sourceDirName":"core/commands","slug":"/core/commands/core-commands-power","permalink":"/core/commands/core-commands-power","draft":false,"unlisted":false,"editUrl":"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/power.md","tags":[],"version":"current","frontMatter":{"id":"core-commands-power","title":"Power"},"sidebar":"sidebar","previous":{"title":"Openocd","permalink":"/core/commands/core-commands-openocd"},"next":{"title":"Qmi","permalink":"/core/commands/core-commands-qmi"}}');var r=s(74848),d=s(28453);const i={id:"core-commands-power",title:"Power"},c=void 0,l={},t=[{value:"<code>power.help</code>",id:"powerhelp",level:2},{value:"<code>power.hibernate</code>",id:"powerhibernate",level:2},{value:"<code>power.reboot</code>",id:"powerreboot",level:2},{value:"<code>power.request_reboot</code>",id:"powerrequest_reboot",level:2},{value:"<code>power.restart_3v3</code>",id:"powerrestart_3v3",level:2},{value:"<code>power.sleep</code>",id:"powersleep",level:2},{value:"<code>power.sleep_timer</code>",id:"powersleep_timer",level:2},{value:"<code>power.status</code>",id:"powerstatus",level:2}];function h(e){const n={admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"powerhelp",children:(0,r.jsx)(n.code,{children:"power.help"})}),"\n",(0,r.jsx)(n.p,{children:"Shows this help information."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"powerhibernate",children:(0,r.jsx)(n.code,{children:"power.hibernate"})}),"\n",(0,r.jsx)(n.p,{children:"Power down system and put device into hibernate state."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"delay"})})," (str): Delay in seconds before powering down. Default is ",(0,r.jsx)(n.code,{children:"60"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"confirm"})})," (bool): Acknowledge the execution of this command. Default is ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why we decided to hibernate. Default is ",(0,r.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"powerreboot",children:(0,r.jsx)(n.code,{children:"power.reboot"})}),"\n",(0,r.jsx)(n.p,{children:"Reboot system immediately."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why we decided to reboot. Default is ",(0,r.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"powerrequest_reboot",children:(0,r.jsx)(n.code,{children:"power.request_reboot"})}),"\n",(0,r.jsx)(n.p,{children:"Request for a future system reboot."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"pending"})})," (bool): Default is ",(0,r.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"immediately"})})," (bool): Default is ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why we decided to reboot. Default is ",(0,r.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"powerrestart_3v3",children:(0,r.jsx)(n.code,{children:"power.restart_3v3"})}),"\n",(0,r.jsx)(n.p,{children:"Restart the 3V3 power supply. This will restart the modem and also the accelerometer the hard way."}),"\n",(0,r.jsxs)(n.p,{children:["WARNING: Any open serial connections to the modem (eg. in ec2x_manager and tracking_manager) may cause the system to freeze or block the TTYs and make new numbering after modem is re-initialized. It is recommended to use ",(0,r.jsx)(n.code,{children:"ec2x.power_off"})," to restart modem."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"confirm"})})," (bool): Acknowledge the execution of this command. Default is ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why the 3V3 supply is restarted. Default is ",(0,r.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"powersleep",children:(0,r.jsx)(n.code,{children:"power.sleep"})}),"\n",(0,r.jsx)(n.p,{children:"Power down system and put device into sleep state."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"interval"})})," (int): Sleep interval in seconds. Default is ",(0,r.jsx)(n.code,{children:"60"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"delay"})})," (str): Delay in seconds before powering down. Default is ",(0,r.jsx)(n.code,{children:"60"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"modem_off"})})," (bool): Power off 3V3 supply to modem on mPCIe slot. Default is ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"acc_off"})})," (bool): Put accelerometer into standby. Default is ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"confirm"})})," (bool): Acknowledge the execution of this command. Default is ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why we decided to sleep. Default is ",(0,r.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"powersleep_timer",children:(0,r.jsx)(n.code,{children:"power.sleep_timer"})}),"\n",(0,r.jsx)(n.p,{children:"Setup sleep timer to schedule power off upon inactivity."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Do not access pillar data in this function as they will not be available when called from engines (separate processes)."})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"add"})})," (str): Add a timer with the given name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"clear"})})," (str): Clear sleep timer(s) matching the given name. Use ",(0,r.jsx)(n.code,{children:"*"})," to clear all."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"enable"})})," (bool): Enable or disable timer. ",(0,r.jsx)(n.strong,{children:"DEPRECATED"}),": Use ",(0,r.jsx)(n.code,{children:"add"})," or ",(0,r.jsx)(n.code,{children:"clear"})," instead."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"period"})})," (int): Timer period in seconds before performing sleep. Default is ",(0,r.jsx)(n.code,{children:"1800"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why we decided to sleep. Default is ",(0,r.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"powerstatus",children:(0,r.jsx)(n.code,{children:"power.status"})}),"\n",(0,r.jsx)(n.p,{children:"Get status and debug information regarding power management."})]})}function a(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);