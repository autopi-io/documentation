"use strict";(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[465],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(96540);const t={},l=s.createContext(t);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}},47418:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core/commands/core-commands-minionutil","title":"Minionutil","description":"minionutil.change_master","source":"@site/docs/core/commands/minionutil.md","sourceDirName":"core/commands","slug":"/core/commands/core-commands-minionutil","permalink":"/core/commands/core-commands-minionutil","draft":false,"unlisted":false,"editUrl":"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/minionutil.md","tags":[],"version":"current","frontMatter":{"id":"core-commands-minionutil","title":"Minionutil"},"sidebar":"sidebar","previous":{"title":"Log","permalink":"/core/commands/core-commands-log"},"next":{"title":"Modem","permalink":"/core/commands/core-commands-modem"}}');var t=i(74848),l=i(28453);const r={id:"core-commands-minionutil",title:"Minionutil"},o=void 0,d={},c=[{value:"<code>minionutil.change_master</code>",id:"minionutilchange_master",level:2},{value:"<code>minionutil.help</code>",id:"minionutilhelp",level:2},{value:"<code>minionutil.last_errors</code>",id:"minionutillast_errors",level:2},{value:"<code>minionutil.last_logs</code>",id:"minionutillast_logs",level:2},{value:"<code>minionutil.last_startup</code>",id:"minionutillast_startup",level:2},{value:"<code>minionutil.log_files</code>",id:"minionutillog_files",level:2},{value:"<code>minionutil.master_status</code>",id:"minionutilmaster_status",level:2},{value:"<code>minionutil.request_restart</code>",id:"minionutilrequest_restart",level:2},{value:"<code>minionutil.restart</code>",id:"minionutilrestart",level:2},{value:"<code>minionutil.run_job</code>",id:"minionutilrun_job",level:2},{value:"<code>minionutil.status_schedule</code>",id:"minionutilstatus_schedule",level:2},{value:"<code>minionutil.trigger_event</code>",id:"minionutiltrigger_event",level:2},{value:"<code>minionutil.update_release</code>",id:"minionutilupdate_release",level:2}];function h(e){const n={admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"minionutilchange_master",children:(0,t.jsx)(n.code,{children:"minionutil.change_master"})}),"\n",(0,t.jsx)(n.p,{children:"Change to different master host."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"host"})})," (str): Hostname of the new master to change to."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"confirm"})})," (bool): Acknowledge the execution of this command. Default is ",(0,t.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"show_changes"})})," (bool): Show the changes made in the file ",(0,t.jsx)(n.code,{children:"/etc/salt/minion"}),". Default is ",(0,t.jsx)(n.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"When the master (hub) is changed, the API endpoint URL won't be updated automatically"})}),"\n",(0,t.jsx)(n.p,{children:"unless there is a pending sync (for example coming from an update) that will execute the\nminion.config state."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"When moving back and forth between envs and the key hasn't been accepted,"})}),"\n",(0,t.jsx)(n.p,{children:"the device will keep retrying to connect to the master. If then the salt-minion service\nis restarted, the service won`t shutdown until a SIGKILL is sent to the process (i.e. the\nsalt-minion service will keep retrying to connect to the salt-master)"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutilhelp",children:(0,t.jsx)(n.code,{children:"minionutil.help"})}),"\n",(0,t.jsx)(n.p,{children:"Shows this help information."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutillast_errors",children:(0,t.jsx)(n.code,{children:"minionutil.last_errors"})}),"\n",(0,t.jsx)(n.p,{children:"Get last errors from minion log."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"file"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"minion"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"until"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"$"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"level"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"error"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"count"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"before"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"after"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"limit"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"100"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutillast_logs",children:(0,t.jsx)(n.code,{children:"minionutil.last_logs"})}),"\n",(0,t.jsx)(n.p,{children:"Get last log lines from minion log."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"file"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"minion"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"until"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"$"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"match"})})," (str): Default is ",(0,t.jsx)(n.code,{children:".*"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"count"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"before"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"after"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"limit"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"100"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutillast_startup",children:(0,t.jsx)(n.code,{children:"minionutil.last_startup"})}),"\n",(0,t.jsx)(n.p,{children:"Get log lines for last startup sequence."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"file"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"minion"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"until"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"$"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"match"})})," (str): Default is ",(0,t.jsx)(n.code,{children:"Setting up the Salt Minion"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"limit"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"100"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutillog_files",children:(0,t.jsx)(n.code,{children:"minionutil.log_files"})}),"\n",(0,t.jsx)(n.p,{children:"List all minion log files."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutilmaster_status",children:(0,t.jsx)(n.code,{children:"minionutil.master_status"})}),"\n",(0,t.jsxs)(n.p,{children:["Get status of connection to master.\nImplementation originates from the ",(0,t.jsx)(n.code,{children:"status.master"})," command but without the logic to trigger events."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutilrequest_restart",children:(0,t.jsx)(n.code,{children:"minionutil.request_restart"})}),"\n",(0,t.jsx)(n.p,{children:"Request for a future restart of the minion service."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"pending"})})," (bool): Default is ",(0,t.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"immediately"})})," (bool): Default is ",(0,t.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"delay"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"10"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"expiration"})})," (int): Default is ",(0,t.jsx)(n.code,{children:"1200"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why we decided to restart. Default is ",(0,t.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutilrestart",children:(0,t.jsx)(n.code,{children:"minionutil.restart"})}),"\n",(0,t.jsx)(n.p,{children:"Restart the minion service immediately."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"reason"})})," (str): Reason code that tells why we decided to restart. Default is ",(0,t.jsx)(n.code,{children:"unknown"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutilrun_job",children:(0,t.jsx)(n.code,{children:"minionutil.run_job"})}),"\n",(0,t.jsx)(n.p,{children:"Run a job by passing it to the minion process.\nThis function makes it possible to run states and also get pillar data from external processes (engines etc.)."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutilstatus_schedule",children:(0,t.jsx)(n.code,{children:"minionutil.status_schedule"})}),"\n",(0,t.jsx)(n.p,{children:"Dedicated to be called from schedule and trigger minion status events."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutiltrigger_event",children:(0,t.jsx)(n.code,{children:"minionutil.trigger_event"})}),"\n",(0,t.jsx)(n.p,{children:"Triggers an event on the minion event bus."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"minionutilupdate_release",children:(0,t.jsx)(n.code,{children:"minionutil.update_release"})}),"\n",(0,t.jsx)(n.p,{children:"Update a minion to newest release by running a highstate if not already up-to-date."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"OPTIONAL ARGUMENTS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"force"})})," (bool): Default is ",(0,t.jsx)(n.code,{children:"False"}),". Force an update, skipping all checks that would stop the update from occuring."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"demand"})})," (bool): Default is ",(0,t.jsx)(n.code,{children:"False"}),". Demand an update, even if the device is already in the latest version."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"dry_run"})})," (bool): Default is ",(0,t.jsx)(n.code,{children:"False"}),". Don`t actually perform the update."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"only_retry"})})," (bool): Default is ",(0,t.jsx)(n.code,{children:"False"}),". Perform an update only if it is in the retrying state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"reset_attempts"})})," (bool): Default is ",(0,t.jsx)(n.code,{children:"False"}),". Set this to true if you want to reset the attempts counter that limits the amount of failed update retries."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Notes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The difference between the ",(0,t.jsx)(n.code,{children:"force"})," and ",(0,t.jsx)(n.code,{children:"demand"})," arguments is that ",(0,t.jsx)(n.code,{children:"demand"})," is used to perform an update even if the device is already up-to-date.\nIt will not skip over the maximum allowed failed update retries. ",(0,t.jsx)(n.code,{children:"force"})," on the other hand will do both, it will perform an update on the device,\neven if it",(0,t.jsx)(n.code,{children:"s already up to date, but will also skip over the maximum allowed failed updates. In other words, they are almost the same, except that "}),"force` will skip over the retry limit."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);