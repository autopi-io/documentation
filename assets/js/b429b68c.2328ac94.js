(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[8529],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return c}});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=m(n),c=a,k=d["".concat(s,".").concat(c)]||d[c]||p[c]||l;return n?i.createElement(k,r(r({ref:t},u),{},{components:n})):i.createElement(k,r({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var m=2;m<l;m++)r[m]=n[m];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},16835:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return m},toc:function(){return u},default:function(){return d}});var i=n(22122),a=n(19756),l=(n(67294),n(3905)),r=["components"],o={id:"core-commands-minionutil",title:"Minionutil"},s=void 0,m={unversionedId:"core/commands/core-commands-minionutil",id:"core/commands/core-commands-minionutil",isDocsHomePage:!1,title:"Minionutil",description:"minionutil.change_master",source:"@site/docs/core/commands/minionutil.md",sourceDirName:"core/commands",slug:"/core/commands/core-commands-minionutil",permalink:"/core/commands/core-commands-minionutil",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/minionutil.md",tags:[],version:"current",frontMatter:{id:"core-commands-minionutil",title:"Minionutil"},sidebar:"sidebar",previous:{title:"Log",permalink:"/core/commands/core-commands-log"},next:{title:"Modem",permalink:"/core/commands/core-commands-modem"}},u=[{value:"<code>minionutil.change_master</code>",id:"minionutilchange_master",children:[]},{value:"<code>minionutil.help</code>",id:"minionutilhelp",children:[]},{value:"<code>minionutil.last_errors</code>",id:"minionutillast_errors",children:[]},{value:"<code>minionutil.last_logs</code>",id:"minionutillast_logs",children:[]},{value:"<code>minionutil.last_startup</code>",id:"minionutillast_startup",children:[]},{value:"<code>minionutil.log_files</code>",id:"minionutillog_files",children:[]},{value:"<code>minionutil.master_status</code>",id:"minionutilmaster_status",children:[]},{value:"<code>minionutil.request_restart</code>",id:"minionutilrequest_restart",children:[]},{value:"<code>minionutil.restart</code>",id:"minionutilrestart",children:[]},{value:"<code>minionutil.run_job</code>",id:"minionutilrun_job",children:[]},{value:"<code>minionutil.status_schedule</code>",id:"minionutilstatus_schedule",children:[]},{value:"<code>minionutil.trigger_event</code>",id:"minionutiltrigger_event",children:[]},{value:"<code>minionutil.update_release</code>",id:"minionutilupdate_release",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"minionutilchange_master"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.change_master")),(0,l.kt)("p",null,"Change to different master host."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"host"))," (str): Hostname of the new master to change to.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"confirm"))," (bool): Acknowledge the execution of this command. Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"show_changes"))," (bool): Show the changes made in the file ",(0,l.kt)("inlineCode",{parentName:"li"},"/etc/salt/minion"),". Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"When the master (hub) is changed, the API endpoint URL won't be updated automatically"))),(0,l.kt)("p",null,"unless there is a pending sync (for example coming from an update) that will execute the\nminion.config state."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"When moving back and forth between envs and the key hasn't been accepted,"))),(0,l.kt)("p",null,"the device will keep retrying to connect to the master. If then the salt-minion service\nis restarted, the service won`t shutdown until a SIGKILL is sent to the process (i.e. the\nsalt-minion service will keep retrying to connect to the salt-master)"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutilhelp"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.help")),(0,l.kt)("p",null,"Shows this help information."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutillast_errors"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.last_errors")),(0,l.kt)("p",null,"Get last errors from minion log."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"file"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"minion"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"until"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"$"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"level"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"error"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"count"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"before"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"after"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"limit"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"100"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutillast_logs"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.last_logs")),(0,l.kt)("p",null,"Get last log lines from minion log."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"file"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"minion"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"until"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"$"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"match"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},".*"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"count"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"before"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"after"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"limit"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"100"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutillast_startup"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.last_startup")),(0,l.kt)("p",null,"Get log lines for last startup sequence."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"file"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"minion"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"until"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"$"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"match"))," (str): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"Setting up the Salt Minion"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"limit"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"100"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutillog_files"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.log_files")),(0,l.kt)("p",null,"List all minion log files."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutilmaster_status"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.master_status")),(0,l.kt)("p",null,"Get status of connection to master.\nImplementation originates from the ",(0,l.kt)("inlineCode",{parentName:"p"},"status.master")," command but without the logic to trigger events."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutilrequest_restart"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.request_restart")),(0,l.kt)("p",null,"Request for a future restart of the minion service."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"pending"))," (bool): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"immediately"))," (bool): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"delay"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"10"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"expiration"))," (int): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"1200"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"reason"))," (str): Reason code that tells why we decided to restart. Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutilrestart"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.restart")),(0,l.kt)("p",null,"Restart the minion service immediately."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"reason"))," (str): Reason code that tells why we decided to restart. Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"unknown"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutilrun_job"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.run_job")),(0,l.kt)("p",null,"Run a job by passing it to the minion process.\nThis function makes it possible to run states and also get pillar data from external processes (engines etc.)."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutilstatus_schedule"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.status_schedule")),(0,l.kt)("p",null,"Dedicated to be called from schedule and trigger minion status events."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutiltrigger_event"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.trigger_event")),(0,l.kt)("p",null,"Triggers an event on the minion event bus."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"minionutilupdate_release"},(0,l.kt)("inlineCode",{parentName:"h2"},"minionutil.update_release")),(0,l.kt)("p",null,"Update a minion to newest release by running a highstate if not already up-to-date."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"force"))," (bool): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),". Force an update, skipping all checks that would stop the update from occuring."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"demand"))," (bool): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),". Demand an update, even if the device is already in the latest version."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"dry_run"))," (bool): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),". Don`t actually perform the update."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"only_retry"))," (bool): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),". Perform an update only if it is in the retrying state."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"reset_attempts"))," (bool): Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"False"),". Set this to true if you want to reset the attempts counter that limits the amount of failed update retries.")),(0,l.kt)("p",null,"Notes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The difference between the ",(0,l.kt)("inlineCode",{parentName:"li"},"force")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"demand")," arguments is that ",(0,l.kt)("inlineCode",{parentName:"li"},"demand")," is used to perform an update even if the device is already up-to-date.\nIt will not skip over the maximum allowed failed update retries. ",(0,l.kt)("inlineCode",{parentName:"li"},"force")," on the other hand will do both, it will perform an update on the device,\neven if it",(0,l.kt)("inlineCode",{parentName:"li"},"s already up to date, but will also skip over the maximum allowed failed updates. In other words, they are almost the same, except that\n"),"force` will skip over the retry limit.")))}d.isMDXComponent=!0}}]);