(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{125:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return r})),t.d(a,"metadata",(function(){return o})),t.d(a,"toc",(function(){return c})),t.d(a,"default",(function(){return b}));var n=t(3),i=t(7),l=(t(0),t(156)),r={id:"core-commands-obd",title:"Obd"},o={unversionedId:"core/commands/core-commands-obd",id:"core/commands/core-commands-obd",isDocsHomePage:!1,title:"Obd",description:"obd.battery",source:"@site/docs/core/commands/obd.md",slug:"/core/commands/core-commands-obd",permalink:"/core/commands/core-commands-obd",version:"current",sidebar:"coreSidebar",previous:{title:"Minionutil",permalink:"/core/commands/core-commands-minionutil"},next:{title:"Power",permalink:"/core/commands/core-commands-power"}},c=[{value:"<code>obd.battery</code>",id:"obdbattery",children:[]},{value:"<code>obd.commands</code>",id:"obdcommands",children:[]},{value:"<code>obd.connection</code>",id:"obdconnection",children:[]},{value:"<code>obd.context</code>",id:"obdcontext",children:[]},{value:"<code>obd.dtc</code>",id:"obddtc",children:[]},{value:"<code>obd.dump</code>",id:"obddump",children:[]},{value:"<code>obd.execute</code>",id:"obdexecute",children:[]},{value:"<code>obd.file_export</code>",id:"obdfile_export",children:[]},{value:"<code>obd.file_import</code>",id:"obdfile_import",children:[]},{value:"<code>obd.filter</code>",id:"obdfilter",children:[]},{value:"<code>obd.help</code>",id:"obdhelp",children:[]},{value:"<code>obd.manage</code>",id:"obdmanage",children:[]},{value:"<code>obd.monitor</code>",id:"obdmonitor",children:[]},{value:"<code>obd.play</code>",id:"obdplay",children:[]},{value:"<code>obd.protocol</code>",id:"obdprotocol",children:[]},{value:"<code>obd.query</code>",id:"obdquery",children:[]},{value:"<code>obd.recordings</code>",id:"obdrecordings",children:[]},{value:"<code>obd.send</code>",id:"obdsend",children:[]},{value:"<code>obd.setup</code>",id:"obdsetup",children:[]},{value:"<code>obd.status</code>",id:"obdstatus",children:[]}],s={toc:c};function b(e){var a=e.components,t=Object(i.a)(e,["components"]);return Object(l.a)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(l.a)("h2",{id:"obdbattery"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.battery")),Object(l.a)("p",null,"Gets current battery voltage"),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdcommands"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.commands")),Object(l.a)("p",null,"Lists all supported OBD commands found for vehicle."),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdconnection"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.connection")),Object(l.a)("p",null,"Manages current connection."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Changes baudrate used to communicate with interface."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"reset"))," (str): Reboots interface. Available options: warm, cold")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"EXAMPLES")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.connection")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.connection baudrate=1152000")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.connection reset=cold"))),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdcontext"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.context")),Object(l.a)("p",null,"Gets current context."),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obddtc"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.dtc")),Object(l.a)("p",null,"Reads and clears Diagnostics Trouble Codes (DTCs)."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"clear"))," (bool): clear DTC codes")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obddump"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.dump")),Object(l.a)("p",null,"Dumps all messages from bus to screen or file."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"duration"))," (int): How many seconds to record data? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"2")," seconds."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"file"))," (str): Write data to a file with the given name."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"description"))," (str): Additional description to the file."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"raw_response"))," (bool): Get raw response without any validation nor parsing? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"format_response"))," (bool): Format response messages by separating header and data with a hash sign? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"True"),".")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdexecute"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.execute")),Object(l.a)("p",null,"Executes an AT/ST command."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"cmd"))," (str): Command to execute.")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"assert_result"))," (str or list): Validate the response by checking that is matches this specific value."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"reset"))," (str): Reset interface after execution. Valid options are: ",Object(l.a)("inlineCode",{parentName:"li"},"warm"),", ",Object(l.a)("inlineCode",{parentName:"li"},"cold")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"keep_conn"))," (bool): Keep connection to interface after execution or close it permanently? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"True"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is the given command.")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdfile_export"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.file_export")),Object(l.a)("p",null,"Fast export of all messages on a bus to a log file."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"run"))," (bool): Specify if subprocess should be running or not. If not defined the current state will be queried."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"folder"))," (str): Custom folder to place export log files."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"wait_timeout"))," (int): Maximum time in seconds to wait for subprocess to complete. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"0"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"monitor_filtering"))," (bool): Use filters while monitoring or monitor all messages? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),". It is possible to specify ",Object(l.a)("inlineCode",{parentName:"li"},"can")," in order to add filters based on the messages found in a CAN database file (.dbc)."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"monitor_mode"))," (int): The STN monitor mode. Default is ",Object(l.a)("inlineCode",{parentName:"li"},"0"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"read_timeout"))," (int): How long time in seconds should the subprocess wait for data on the serial port? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"1"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"serial_baudrate"))," (int): Specify a custom baud rate to use for the serial connection to the STN."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"process_nice"))," (int): Process nice value that controls the priority of the subprocess. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"-2"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),".")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdfile_import"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.file_import")),Object(l.a)("p",null,"Fast import of exported log files containing messages from a bus."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"folder"))," (str): Custom folder to import log files from."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"limit"))," (int): The maximum number of lines/messages to read each time. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"5000"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"idle_sleep"))," (int): Pause in seconds if there is no lines/messages to import. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"0"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"cleanup_grace"))," (int): Grace period in seconds before a fully imported log file is deleted. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"60"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"process_nice"))," (int): Process nice value that controls the priority of the service. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"0"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is ",Object(l.a)("inlineCode",{parentName:"li"},"raw"),".")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdfilter"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.filter")),Object(l.a)("p",null,"Manages filters used when monitoring."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"action"))," (str): Action to perform. Available actions are ",Object(l.a)("inlineCode",{parentName:"li"},"list"),", ",Object(l.a)("inlineCode",{parentName:"li"},"add")," and ",Object(l.a)("inlineCode",{parentName:"li"},"clear"),".")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"EXAMPLES")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.filter list")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.filter add type=<pass|block|flow> pattern=7C8 mask=7FF")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.filter clear [type=<pass|block|flow>]"))),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdhelp"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.help")),Object(l.a)("p",null,"Shows this help information."),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdmanage"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.manage")),Object(l.a)("p",null,"Runtime management of the underlying service instance."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"SUPPORTED COMMANDS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"hook list|call <name> [argument]... [<key>=<value>]...")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"worker list|show|start|pause|resume|kill <name>")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"reactor list|show <name>")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"run <key>=<value>..."))),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"EXAMPLES")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage hook list")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage hook call execute_handler ATRV")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage worker list *")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage worker show *")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage worker start *")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage worker pause *")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage worker resume *")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage worker kill *")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage reactor list")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.manage reactor show *")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},'obd.manage run handler="query" args="[\\"ELM_VOLTAGE\\"]" converter="battery" returner="cloud"'))),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdmonitor"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.monitor")),Object(l.a)("p",null,"Monitors messages on bus until limit or duration is reached."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"wait"))," (bool): Wait for each message/line to read according to the default timeout of the serial connection (default 1 second). Otherwise there will only be waiting on the first line. line/message. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"limit"))," (int): The maximum number of messages to read. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"500"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"duration"))," (float): How many seconds to monitor? If not set there is no limitation."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"mode"))," (int): The STN monitor mode. Default is ",Object(l.a)("inlineCode",{parentName:"li"},"0"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"filtering"))," (bool): Use filters while monitoring or monitor all messages? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is ",Object(l.a)("inlineCode",{parentName:"li"},"raw"),".")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdplay"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.play")),Object(l.a)("p",null,"Plays all messages from a file on the bus."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"file"))," (str): Path to file recorded with the ",Object(l.a)("inlineCode",{parentName:"li"},"obd.dump")," command.")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"delay"))," (float): Delay in milliseconds between sending each message. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"0"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"slice"))," (str): Slice the list of messages before sending on the CAN bus. Based one the divide and conquer algorithm. Multiple slice characters can be specified in continuation of each other.",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"t"),": Top half of remaining result."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"b"),": Bottom half of remaining result."))),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"filter"))," (str): Filter out messages before sending on the CAN bus. Multiple filters can be specified if separated using comma characters.",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"+[id][#][data]"),": Include only messages matching string."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"-[id][#][data]"),": Exclude messages matching string."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"+duplicate"),": Include only messages where duplicates exist."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"-duplicate"),": Exclude messages where duplicates exist."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"+mutate"),": Include only messages where data mutates."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"-mutate"),": Exclude messages where data mutates."))),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"group"))," (str): How to group the result of sent messages. This only affects the display values returned from this command. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"id"),".",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"id"),": Group by message ID only."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"msg"),": Group by entire message string."))),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to send the data. If none is specifed the current protocol will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"test"))," (bool): Run command in test-only? (dry-run) mode. No data will be sent on CAN bus. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),".")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdprotocol"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.protocol")),Object(l.a)("p",null,"Configures protocol or lists all supported."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"set"))," (str): Change to protocol with given identifier."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Use custom protocol baudrate. "),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),".")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"EXAMPLES")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.protocol")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.protocol set=auto")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.protocol set=6")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.protocol set=53 baudrate=250000"))),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdquery"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.query")),Object(l.a)("p",null,"Queries a given OBD command. To see supported OBD commands for your vehicle run: ",Object(l.a)("inlineCode",{parentName:"p"},"obd.commands")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"name"))," (str): Name of the command.")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"mode"))," (str): Service section of the PID."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"pid"))," (str): Code section of the PID."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"header"))," (str): Identifer of message to send. If none is specifed the default OBD header will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"bytes"))," (int): Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"0"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"decoder"))," (str): Specific decoder to be used to process the response."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"formula"))," (str): Formula written in Python to convert the response."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"unit"))," (str): Unit of the result."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"force"))," (bool): Force query of unknown command. Default is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),".")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"EXAMPLES")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.query RPM")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.query SPEED")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.query FUEL_LEVEL force=True")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.query custom_intake_temp_raw mode=01 pid=0F")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("inlineCode",{parentName:"li"},"obd.query custom_intake_temp mode=01 pid=0F decoder=temp"))),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdrecordings"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.recordings")),Object(l.a)("p",null,"Lists all dumped recordings available on disk."),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdsend"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.send")),Object(l.a)("p",null,"Sends a message on bus."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"msg"))," (str): Message to send.")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS, GENERAL")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"header"))," (str): Identifer of message to send. If none is specifed the default header will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"auto_format"))," (bool): Apply automatic formatting of messages? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"expect_response"))," (bool): Wait for response after sending? Avoid waiting for timeout by specifying the exact the number of frames expected. Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"raw_response"))," (bool): Get raw response without any validation nor parsing? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"echo"))," (bool): Include the request message in the response? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"protocol"))," (str): ID of specific protocol to be used to receive the data. If none is specifed the current protocol will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"baudrate"))," (int): Specific protocol baudrate to be used. If none is specifed the current baudrate will be used."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"verify"))," (bool): Verify that OBD-II communication is possible with the desired protocol? Default value is ",Object(l.a)("inlineCode",{parentName:"li"},"False"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"output"))," (str): What data type should the output be returned in? Default is a ",Object(l.a)("inlineCode",{parentName:"li"},"list"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"type"))," (str): Specify a name of the type of the result. Default is ",Object(l.a)("inlineCode",{parentName:"li"},"raw"),".")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS, CAN SPECIFIC")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_extended_address"))," (str): Use CAN extended address."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_flow_control_clear"))," (bool): Clear all CAN flow control filters and ID pairs before adding any new ones."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_flow_control_filter"))," (str): Ensure CAN flow control filter is added. Value must consist of ",Object(l.a)("inlineCode",{parentName:"li"},"<pattern>,<mask>"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_flow_control_id_pair"))," (str): Ensure CAN flow control ID pair is added. Value must consist of ",Object(l.a)("inlineCode",{parentName:"li"},"<transmitter ID>,<receiver ID>"),".")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdsetup"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.setup")),Object(l.a)("p",null,"Setup advanced runtime settings."),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"OPTIONAL ARGUMENTS")),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_extended_address"))," (str): Use CAN extended address."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_flow_control_clear"))," (bool): Clear all CAN flow control filters and ID pairs before adding any new ones."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_flow_control_filter"))," (str): Ensure CAN flow control filter is added. Value must consist of ",Object(l.a)("inlineCode",{parentName:"li"},"<pattern>,<mask>"),"."),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},Object(l.a)("inlineCode",{parentName:"strong"},"can_flow_control_id_pair"))," (str): Ensure CAN flow control ID pair is added. Value must consist of ",Object(l.a)("inlineCode",{parentName:"li"},"<transmitter ID>,<receiver ID>"),".")),Object(l.a)("hr",null),Object(l.a)("h2",{id:"obdstatus"},Object(l.a)("inlineCode",{parentName:"h2"},"obd.status")),Object(l.a)("p",null,"Gets current status information."))}b.isMDXComponent=!0},156:function(e,a,t){"use strict";t.d(a,"a",(function(){return m}));var n=t(0),i=t.n(n);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),b=function(e){var a=i.a.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p={inlineCode:"code",wrapper:function(e){var a=e.children;return i.a.createElement(i.a.Fragment,{},a)}},d=i.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(t),m=n,u=d["".concat(r,".").concat(m)]||d[m]||p[m]||l;return t?i.a.createElement(u,o(o({ref:a},s),{},{components:t})):i.a.createElement(u,o({ref:a},s))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var s=2;s<l;s++)r[s]=t[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);