(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[4759],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return h},kt:function(){return s}});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=o.createContext({}),d=function(e){var r=o.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},h=function(e){var r=d(e.components);return o.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},k=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),k=d(t),s=n,m=k["".concat(c,".").concat(s)]||k[s]||u[s]||l;return t?o.createElement(m,i(i({ref:r},h),{},{components:t})):o.createElement(m,i({ref:r},h))}));function s(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,i=new Array(l);i[0]=k;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a.mdxType="string"==typeof e?e:n,i[1]=a;for(var d=2;d<l;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},74579:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return h},default:function(){return k}});var o=t(22122),n=t(19756),l=(t(67294),t(3905)),i=["components"],a={id:"core-commands-hooklib",title:"Hooklib"},c=void 0,d={unversionedId:"core/commands/core-commands-hooklib",id:"core/commands/core-commands-hooklib",isDocsHomePage:!1,title:"Hooklib",description:"hooklib.alternatingreadoutfilter",source:"@site/docs/core/commands/hooklib.md",sourceDirName:"core/commands",slug:"/core/commands/core-commands-hooklib",permalink:"/core/commands/core-commands-hooklib",editUrl:"https://github.com/autopi-io/documentation/edit/master/docs/core/commands/hooklib.md",tags:[],version:"current",frontMatter:{id:"core-commands-hooklib",title:"Hooklib"},sidebar:"sidebar",previous:{title:"Gnss",permalink:"/core/commands/core-commands-gnss"},next:{title:"Hostapd",permalink:"/core/commands/core-commands-hostapd"}},h=[{value:"<code>hooklib.alternating_readout_filter</code>",id:"hooklibalternating_readout_filter",children:[]},{value:"<code>hooklib.battery_converter</code>",id:"hooklibbattery_converter",children:[]},{value:"<code>hooklib.battery_event_trigger</code>",id:"hooklibbattery_event_trigger",children:[]},{value:"<code>hooklib.echo_handler</code>",id:"hooklibecho_handler",children:[]},{value:"<code>hooklib.geofence_event_trigger</code>",id:"hooklibgeofence_event_trigger",children:[]},{value:"<code>hooklib.kernel_error_blacklist_filter</code>",id:"hooklibkernel_error_blacklist_filter",children:[]},{value:"<code>hooklib.kernel_error_event_trigger</code>",id:"hooklibkernel_error_event_trigger",children:[]},{value:"<code>hooklib.load_geofences_handler</code>",id:"hooklibload_geofences_handler",children:[]},{value:"<code>hooklib.module_direct_handler</code>",id:"hooklibmodule_direct_handler",children:[]},{value:"<code>hooklib.module_handler</code>",id:"hooklibmodule_handler",children:[]},{value:"<code>hooklib.returner_call_handler</code>",id:"hooklibreturner_call_handler",children:[]},{value:"<code>hooklib.skip_empty_filter</code>",id:"hooklibskip_empty_filter",children:[]},{value:"<code>hooklib.temperature_event_trigger</code>",id:"hooklibtemperature_event_trigger",children:[]}],u={toc:h};function k(e){var r=e.components,t=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,o.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"hooklibalternating_readout_filter"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.alternating_readout_filter")),(0,l.kt)("p",null,"Filter that only returns alternating/changed results."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibbattery_converter"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.battery_converter")),(0,l.kt)("p",null,"Converts a voltage reading result with battery charge state and level."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibbattery_event_trigger"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.battery_event_trigger")),(0,l.kt)("p",null,"Looks for battery results and triggers ",(0,l.kt)("inlineCode",{parentName:"p"},"vehicle/battery/*")," event when voltage changes."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibecho_handler"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.echo_handler")),(0,l.kt)("p",null,"Mainly for testing."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibgeofence_event_trigger"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.geofence_event_trigger")),(0,l.kt)("p",null,"Listens for position results and triggers geofence inside/outside and enter/exit events\ninside/outside - triggered on startup\nenter/exit - triggered during driving\nChange happens when the same result is repeated ","[repeat_count_to_trigger_change]"," times"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibkernel_error_blacklist_filter"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.kernel_error_blacklist_filter")),(0,l.kt)("p",null,"Filters out blacklisted kernel errors."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibkernel_error_event_trigger"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.kernel_error_event_trigger")),(0,l.kt)("p",null,"Triggers ",(0,l.kt)("inlineCode",{parentName:"p"},"system/kernel/error")," events."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibload_geofences_handler"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.load_geofences_handler")),(0,l.kt)("p",null,"Loads geofence file"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibmodule_direct_handler"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.module_direct_handler")),(0,l.kt)("p",null,"Calls a Salt execution module directy from current process."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibmodule_handler"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.module_handler")),(0,l.kt)("p",null,"Calls a Salt execution module from within the minion process."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibreturner_call_handler"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.returner_call_handler")),(0,l.kt)("p",null,"Calls a Salt returner module directy from current process."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibskip_empty_filter"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.skip_empty_filter")),(0,l.kt)("p",null,"Filters out empty results."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"hooklibtemperature_event_trigger"},(0,l.kt)("inlineCode",{parentName:"h2"},"hooklib.temperature_event_trigger")),(0,l.kt)("p",null,"Looks for temperature results and triggers ",(0,l.kt)("inlineCode",{parentName:"p"},"system/temperature/*")," event when temperature changes."))}k.isMDXComponent=!0}}]);