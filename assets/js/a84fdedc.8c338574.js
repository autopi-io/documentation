"use strict";(self.webpackChunkdocumentation_2=self.webpackChunkdocumentation_2||[]).push([[6264],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},33797:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"developer_guides/how-to-use-bluepy-with-autopi-edge-devices","title":"Enabling Bluetooth - Using bluepy with AutoPi Edge Devices","description":"Introduction","source":"@site/docs/developer_guides/how_to_use_bluepy.md","sourceDirName":"developer_guides","slug":"/developer_guides/how-to-use-bluepy-with-autopi-edge-devices","permalink":"/developer_guides/how-to-use-bluepy-with-autopi-edge-devices","draft":false,"unlisted":false,"editUrl":"https://github.com/autopi-io/documentation/edit/master/docs/developer_guides/how_to_use_bluepy.md","tags":[],"version":"current","frontMatter":{"id":"how-to-use-bluepy-with-autopi-edge-devices","title":"Enabling Bluetooth - Using bluepy with AutoPi Edge Devices"},"sidebar":"sidebar","previous":{"title":"Guides Intro","permalink":"/developer_guides/"},"next":{"title":"Configuring MQTT","permalink":"/developer_guides/configuring-mqtt"}}');var r=i(74848),s=i(28453);const a={id:"how-to-use-bluepy-with-autopi-edge-devices",title:"Enabling Bluetooth - Using bluepy with AutoPi Edge Devices"},c="BluePy BLE Guide for AutoPi Edge Devices",o={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Using the Built-in Bluetooth Extention",id:"using-the-built-in-bluetooth-extention",level:2},{value:"Custom Software for Basic bluepy Usage",id:"custom-software-for-basic-bluepy-usage",level:2},{value:"Scanning for Devices - Custom Code Example",id:"scanning-for-devices---custom-code-example",level:3},{value:"Connecting to a Device - Custom Code Example",id:"connecting-to-a-device---custom-code-example",level:3},{value:"Reading and Writing Characteristics - Custom Code Example",id:"reading-and-writing-characteristics---custom-code-example",level:3},{value:"Handling Notifications - Custom Code Example",id:"handling-notifications---custom-code-example",level:3},{value:"Error Handling - Custom Code Example",id:"error-handling---custom-code-example",level:3},{value:"Complete Application - Custom Code Example",id:"complete-application---custom-code-example",level:2},{value:"Further Resources",id:"further-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"bluepy-ble-guide-for-autopi-edge-devices",children:["BluePy BLE Guide for ",(0,r.jsx)(n.a,{href:"https://www.autopi.io",children:"AutoPi"})," Edge Devices"]})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.autopi.io",children:"AutoPi"})," Core relies on BluePy and Bluez packages built into the Linux core on the device."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["AutoPi ",(0,r.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-tmu-cm4",children:"TMU CM4"})," or AutoPi ",(0,r.jsx)(n.a,{href:"https://www.autopi.io/hardware/autopi-canfd-pro",children:"CAN-FD Pro"})," device"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Enable bluetooth from Advanced settings:\n",(0,r.jsx)(n.img,{alt:"Enable bluetoth",src:i(52867).A+"",width:"1638",height:"726"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"using-the-built-in-bluetooth-extention",children:"Using the Built-in Bluetooth Extention"}),"\n",(0,r.jsxs)(n.p,{children:["It is possible to use the ",(0,r.jsx)(n.a,{href:"/core/commands/core-commands-bluetooth/#bluetoothscan",children:"bluetooth.scan"})," command to remote scanning for bluetooth device using the built in ",(0,r.jsx)(n.a,{href:"https://www.autopi.io/software-platform/cloud-management",children:"Cloud"})," terminal."]}),"\n",(0,r.jsx)(n.h2,{id:"custom-software-for-basic-bluepy-usage",children:"Custom Software for Basic bluepy Usage"}),"\n",(0,r.jsxs)(n.p,{children:["A great example of using the ",(0,r.jsx)(n.a,{href:"https://www.autopi.io",children:"AutoPi"})," edge devices full functionality, is teh usage of ",(0,r.jsx)(n.a,{href:"/cloud/device_management/services/create-custom-services/",children:"creating custom services"}),". Using this extendabilty of the devices you utilize the full functionality of the bluepy library on the device."]}),"\n",(0,r.jsx)(n.h3,{id:"scanning-for-devices---custom-code-example",children:"Scanning for Devices - Custom Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from bluepy.btle import Scanner, DefaultDelegate\n\nclass ScanDelegate(DefaultDelegate):\n    def __init__(self):\n        DefaultDelegate.__init__(self)\n\n    def handleDiscovery(self, dev, isNewDev, isNewData):\n        if isNewDev:\n            print(f"Discovered device {dev.addr}")\n        elif isNewData:\n            print(f"Received new data from {dev.addr}")\n\n# Initialize scanner object\nscanner = Scanner().withDelegate(ScanDelegate())\n\n# Scan for devices (timeout in seconds)\ndevices = scanner.scan(10.0)\n\n# Print discovered devices\nfor dev in devices:\n    print(f"Device {dev.addr} ({dev.addrType}), RSSI={dev.rssi} dB")\n    for (adtype, desc, value) in dev.getScanData():\n        print(f"  {desc}: {value}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"connecting-to-a-device---custom-code-example",children:"Connecting to a Device - Custom Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from bluepy.btle import Peripheral, UUID\nimport time\n\ntry:\n    # Connect to device\n    device = Peripheral("XX:XX:XX:XX:XX:XX")  # Replace with your device\'s address\n    \n    # Get all services\n    services = device.getServices()\n    \n    for service in services:\n        print(f"Service UUID: {service.uuid}")\n        \n        # Get characteristics for this service\n        characteristics = service.getCharacteristics()\n        \n        for char in characteristics:\n            print(f"  Characteristic UUID: {char.uuid}")\n            # Check if readable\n            if char.supportsRead():\n                print(f"    Value: {char.read()}")\n                \nexcept Exception as e:\n    print(f"Error: {str(e)}")\nfinally:\n    device.disconnect()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"reading-and-writing-characteristics---custom-code-example",children:"Reading and Writing Characteristics - Custom Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from bluepy.btle import Peripheral, UUID\n\nclass BLEDevice:\n    def __init__(self, address):\n        self.address = address\n        self.device = None\n    \n    def connect(self):\n        self.device = Peripheral(self.address)\n        \n    def read_characteristic(self, service_uuid, char_uuid):\n        service = self.device.getServiceByUUID(UUID(service_uuid))\n        char = service.getCharacteristics(UUID(char_uuid))[0]\n        return char.read()\n        \n    def write_characteristic(self, service_uuid, char_uuid, data):\n        service = self.device.getServiceByUUID(UUID(service_uuid))\n        char = service.getCharacteristics(UUID(char_uuid))[0]\n        char.write(data)\n        \n    def disconnect(self):\n        if self.device:\n            self.device.disconnect()\n\n# Example usage\nif __name__ == "__main__":\n    device = BLEDevice("XX:XX:XX:XX:XX:XX")\n    try:\n        device.connect()\n        # Example UUIDs - replace with your device\'s UUIDs\n        service_uuid = "1800"\n        char_uuid = "2a00"\n        \n        # Read value\n        value = device.read_characteristic(service_uuid, char_uuid)\n        print(f"Read value: {value}")\n        \n        # Write value\n        device.write_characteristic(service_uuid, char_uuid, bytes([0x01]))\n    finally:\n        device.disconnect()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"handling-notifications---custom-code-example",children:"Handling Notifications - Custom Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from bluepy.btle import DefaultDelegate, Peripheral\nimport time\n\nclass NotifyDelegate(DefaultDelegate):\n    def __init__(self):\n        DefaultDelegate.__init__(self)\n\n    def handleNotification(self, cHandle, data):\n        print(f"Notification from handle {cHandle}: {data}")\n\nclass BLENotifyDevice:\n    def __init__(self, address):\n        self.device = Peripheral(address)\n        self.device.setDelegate(NotifyDelegate())\n    \n    def enable_notifications(self, service_uuid, char_uuid):\n        service = self.device.getServiceByUUID(UUID(service_uuid))\n        char = service.getCharacteristics(UUID(char_uuid))[0]\n        \n        # Enable notifications by writing to the CCCD\n        notify_handle = char.getHandle() + 1\n        self.device.writeCharacteristic(notify_handle, b"\\x01\\x00")\n    \n    def wait_for_notifications(self, timeout=1.0):\n        self.device.waitForNotifications(timeout)\n    \n    def disconnect(self):\n        self.device.disconnect()\n\n# Example usage\nif __name__ == "__main__":\n    device = BLENotifyDevice("XX:XX:XX:XX:XX:XX")\n    try:\n        # Enable notifications for a characteristic\n        device.enable_notifications("service_uuid", "char_uuid")\n        \n        # Wait for notifications\n        while True:\n            if device.wait_for_notifications(1.0):\n                continue\n            print("Waiting...")\n    finally:\n        device.disconnect()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"error-handling---custom-code-example",children:"Error Handling - Custom Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from bluepy.btle import Peripheral, BTLEDisconnectError, BTLEGattError\n\nclass BLEDeviceManager:\n    def __init__(self, address):\n        self.address = address\n        self.device = None\n        self.max_retries = 3\n        \n    def connect_with_retry(self):\n        for attempt in range(self.max_retries):\n            try:\n                self.device = Peripheral(self.address)\n                print("Connected successfully")\n                return True\n            except BTLEDisconnectError:\n                print(f"Connection failed, attempt {attempt + 1} of {self.max_retries}")\n                time.sleep(1)\n        return False\n    \n    def safe_read_characteristic(self, service_uuid, char_uuid):\n        try:\n            service = self.device.getServiceByUUID(UUID(service_uuid))\n            char = service.getCharacteristics(UUID(char_uuid))[0]\n            return char.read()\n        except BTLEGattError as e:\n            print(f"GATT error: {str(e)}")\n        except BTLEDisconnectError:\n            print("Device disconnected")\n            self.connect_with_retry()\n        return None\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complete-application---custom-code-example",children:"Complete Application - Custom Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from bluepy.btle import Scanner, Peripheral, DefaultDelegate, BTLEDisconnectError\nimport time\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass BLEDeviceManager:\n    def __init__(self, target_name):\n        self.target_name = target_name\n        self.device = None\n        self.target_address = None\n        \n    def scan_for_device(self, timeout=10):\n        scanner = Scanner()\n        devices = scanner.scan(timeout)\n        \n        for dev in devices:\n            for (adtype, desc, value) in dev.getScanData():\n                if desc == "Complete Local Name" and value == self.target_name:\n                    self.target_address = dev.addr\n                    logger.info(f"Found device: {self.target_address}")\n                    return True\n        return False\n    \n    def connect(self):\n        if not self.target_address:\n            raise ValueError("No device address available")\n            \n        try:\n            self.device = Peripheral(self.target_address)\n            logger.info("Connected successfully")\n            return True\n        except BTLEDisconnectError as e:\n            logger.error(f"Connection failed: {str(e)}")\n            return False\n            \n    def discover_services(self):\n        services = self.device.getServices()\n        for service in services:\n            logger.info(f"Service: {service.uuid}")\n            chars = service.getCharacteristics()\n            for char in chars:\n                logger.info(f"  Characteristic: {char.uuid}")\n                \n    def disconnect(self):\n        if self.device:\n            self.device.disconnect()\n            logger.info("Disconnected")\n\nif __name__ == "__main__":\n    manager = BLEDeviceManager("MyDevice")  # Replace with your device name\n    \n    try:\n        if manager.scan_for_device():\n            if manager.connect():\n                manager.discover_services()\n                # Add your device-specific operations here\n                time.sleep(5)  # Keep connection alive for 5 seconds\n    finally:\n        manager.disconnect()\n'})}),"\n",(0,r.jsx)(n.p,{children:"This example provides a complete application structure that you can adapt for your specific needs."}),"\n",(0,r.jsx)(n.h2,{id:"further-resources",children:"Further Resources"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BluePy Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/IanHarvey/bluepy",children:"GitHub Repository"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/IanHarvey/bluepy/wiki",children:"Wiki"})}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},52867:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/bluetooth_enable-5705429877829bb3123059cb2927474f.jpg"}}]);